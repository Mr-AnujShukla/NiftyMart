{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default function browserReadableStreamToIt(_x) {\n  return _browserReadableStreamToIt.apply(this, arguments);\n}\nfunction _browserReadableStreamToIt() {\n  _browserReadableStreamToIt = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(stream) {\n    var options,\n      reader,\n      result,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            reader = stream.getReader();\n            _context.prev = 2;\n          case 3:\n            if (!true) {\n              _context.next = 13;\n              break;\n            }\n            _context.next = 6;\n            return _awaitAsyncGenerator(reader.read());\n          case 6:\n            result = _context.sent;\n            if (!result.done) {\n              _context.next = 9;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 9:\n            _context.next = 11;\n            return result.value;\n          case 11:\n            _context.next = 3;\n            break;\n          case 13:\n            _context.prev = 13;\n            if (!(options.preventCancel !== true)) {\n              _context.next = 17;\n              break;\n            }\n            _context.next = 17;\n            return _awaitAsyncGenerator(reader.cancel());\n          case 17:\n            reader.releaseLock();\n            return _context.finish(13);\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2,, 13, 19]]);\n  }));\n  return _browserReadableStreamToIt.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;AAKA;;;;;;;AAOA,wBAAgCA,yBAAyB;EAAA;AAAA;AAoBxD;EAAA,0FApBc,iBAAgDC,MAAyB;IAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAAEC,kEAA4C,EAAE;YAChIC,MAAM,GAAGF,MAAM,CAACG,SAAS,EAAE;YAAA;UAAA;YAAA,KAGxB,IAAI;cAAA;cAAA;YAAA;YAAA;YAAA,4BACYD,MAAM,CAACE,IAAI,EAAE;UAAA;YAA5BC,MAAM;YAAA,KAERA,MAAM,CAACC,IAAI;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;YAIf,OAAMD,MAAM,CAACE,KAAK;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA,MAGhBN,OAAO,CAACO,aAAa,KAAK,IAAI;cAAA;cAAA;YAAA;YAAA;YAAA,4BAC1BN,MAAM,CAACO,MAAM,EAAE;UAAA;YAGvBP,MAAM,CAACQ,WAAW,EAAE;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAEvB;EAAA;AAAA","names":["browserReadableStreamToIt","stream","options","reader","getReader","read","result","done","value","preventCancel","cancel","releaseLock"],"sources":["C:\\Users\\HP\\Desktop\\my_workspace\\hackathon\\NFT\\Pixelate\\node_modules\\browser-readablestream-to-it\\src\\index.ts"],"sourcesContent":["\nexport interface BrowserReadableStreamToItOptions {\n  preventCancel?: boolean\n}\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function * browserReadableStreamToIt <T> (stream: ReadableStream<T>, options: BrowserReadableStreamToItOptions = {}): AsyncGenerator<T, void, undefined> {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      await reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}