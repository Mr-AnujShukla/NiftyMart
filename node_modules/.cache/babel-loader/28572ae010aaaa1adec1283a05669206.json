{"ast":null,"code":"import _slicedToArray from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar textDecoder = new TextDecoder();\n\n/**\n * @typedef {import('./interface').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface').RawPBNode} RawPBNode\n */\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[number, number]}\n */\nfunction decodeVarint(bytes, offset) {\n  var v = 0;\n  for (var shift = 0;; shift += 7) {\n    /* c8 ignore next 3 */\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow');\n    }\n    /* c8 ignore next 3 */\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data');\n    }\n    var b = bytes[offset++];\n    v += shift < 28 ? (b & 0x7f) << shift : (b & 0x7f) * Math.pow(2, shift);\n    if (b < 0x80) {\n      break;\n    }\n  }\n  return [v, offset];\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[Uint8Array, number]}\n */\nfunction decodeBytes(bytes, offset) {\n  var byteLen;\n  var _decodeVarint = decodeVarint(bytes, offset);\n  var _decodeVarint2 = _slicedToArray(_decodeVarint, 2);\n  byteLen = _decodeVarint2[0];\n  offset = _decodeVarint2[1];\n  var postOffset = offset + byteLen;\n\n  /* c8 ignore next 3 */\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length');\n  }\n  /* c8 ignore next 3 */\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data');\n  }\n  return [bytes.subarray(offset, postOffset), postOffset];\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} index\n * @returns {[number, number, number]}\n */\nfunction decodeKey(bytes, index) {\n  var wire;\n  var _decodeVarint3 = decodeVarint(bytes, index);\n  var _decodeVarint4 = _slicedToArray(_decodeVarint3, 2);\n  wire = _decodeVarint4[0];\n  index = _decodeVarint4[1];\n  // [wireType, fieldNum, newIndex]\n  return [wire & 0x7, wire >> 3, index];\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBLink}\n */\nfunction decodeLink(bytes) {\n  /** @type {RawPBLink} */\n  var link = {};\n  var l = bytes.length;\n  var index = 0;\n  while (index < l) {\n    var wireType = void 0,\n      fieldNum = void 0;\n    var _decodeKey = decodeKey(bytes, index);\n    var _decodeKey2 = _slicedToArray(_decodeKey, 3);\n    wireType = _decodeKey2[0];\n    fieldNum = _decodeKey2[1];\n    index = _decodeKey2[2];\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section');\n      }\n      if (wireType !== 2) {\n        throw new Error(\"protobuf: (PBLink) wrong wireType (\".concat(wireType, \") for Hash\"));\n      }\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');\n      }\n      var _decodeBytes = decodeBytes(bytes, index);\n      var _decodeBytes2 = _slicedToArray(_decodeBytes, 2);\n      link.Hash = _decodeBytes2[0];\n      index = _decodeBytes2[1];\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section');\n      }\n      if (wireType !== 2) {\n        throw new Error(\"protobuf: (PBLink) wrong wireType (\".concat(wireType, \") for Name\"));\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');\n      }\n      var byts = void 0;\n      var _decodeBytes3 = decodeBytes(bytes, index);\n      var _decodeBytes4 = _slicedToArray(_decodeBytes3, 2);\n      byts = _decodeBytes4[0];\n      index = _decodeBytes4[1];\n      link.Name = textDecoder.decode(byts);\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section');\n      }\n      if (wireType !== 0) {\n        throw new Error(\"protobuf: (PBLink) wrong wireType (\".concat(wireType, \") for Tsize\"));\n      }\n      var _decodeVarint5 = decodeVarint(bytes, index);\n      var _decodeVarint6 = _slicedToArray(_decodeVarint5, 2);\n      link.Tsize = _decodeVarint6[0];\n      index = _decodeVarint6[1];\n    } else {\n      throw new Error(\"protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got \".concat(fieldNum));\n    }\n  }\n\n  /* c8 ignore next 3 */\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data');\n  }\n  return link;\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBNode}\n */\nexport function decodeNode(bytes) {\n  var l = bytes.length;\n  var index = 0;\n  /** @type {RawPBLink[]|void} */\n  var links;\n  var linksBeforeData = false;\n  /** @type {Uint8Array|void} */\n  var data;\n  while (index < l) {\n    var wireType = void 0,\n      fieldNum = void 0;\n    var _decodeKey3 = decodeKey(bytes, index);\n    var _decodeKey4 = _slicedToArray(_decodeKey3, 3);\n    wireType = _decodeKey4[0];\n    fieldNum = _decodeKey4[1];\n    index = _decodeKey4[2];\n    if (wireType !== 2) {\n      throw new Error(\"protobuf: (PBNode) invalid wireType, expected 2, got \".concat(wireType));\n    }\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section');\n      }\n      var _decodeBytes5 = decodeBytes(bytes, index);\n      var _decodeBytes6 = _slicedToArray(_decodeBytes5, 2);\n      data = _decodeBytes6[0];\n      index = _decodeBytes6[1];\n      if (links) {\n        linksBeforeData = true;\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) {\n        // interleaved Links/Dode/Links\n        throw new Error('protobuf: (PBNode) duplicate Links section');\n      } else if (!links) {\n        links = [];\n      }\n      var byts = void 0;\n      var _decodeBytes7 = decodeBytes(bytes, index);\n      var _decodeBytes8 = _slicedToArray(_decodeBytes7, 2);\n      byts = _decodeBytes8[0];\n      index = _decodeBytes8[1];\n      links.push(decodeLink(byts));\n    } else {\n      throw new Error(\"protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got \".concat(fieldNum));\n    }\n  }\n\n  /* c8 ignore next 3 */\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data');\n  }\n\n  /** @type {RawPBNode} */\n  var node = {};\n  if (data) {\n    node.Data = data;\n  }\n  node.Links = links || [];\n  return node;\n}","map":{"version":3,"names":["textDecoder","TextDecoder","decodeVarint","bytes","offset","v","shift","Error","length","b","decodeBytes","byteLen","postOffset","subarray","decodeKey","index","wire","decodeLink","link","l","wireType","fieldNum","Hash","Name","undefined","Tsize","byts","decode","decodeNode","links","linksBeforeData","data","push","node","Data","Links"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@ipld/dag-pb/src/pb-decode.js"],"sourcesContent":["const textDecoder = new TextDecoder()\n\n/**\n * @typedef {import('./interface').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface').RawPBNode} RawPBNode\n */\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[number, number]}\n */\nfunction decodeVarint (bytes, offset) {\n  let v = 0\n\n  for (let shift = 0; ; shift += 7) {\n    /* c8 ignore next 3 */\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow')\n    }\n    /* c8 ignore next 3 */\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data')\n    }\n\n    const b = bytes[offset++]\n    v += shift < 28 ? (b & 0x7f) << shift : (b & 0x7f) * (2 ** shift)\n    if (b < 0x80) {\n      break\n    }\n  }\n  return [v, offset]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[Uint8Array, number]}\n */\nfunction decodeBytes (bytes, offset) {\n  let byteLen\n  ;[byteLen, offset] = decodeVarint(bytes, offset)\n  const postOffset = offset + byteLen\n\n  /* c8 ignore next 3 */\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length')\n  }\n  /* c8 ignore next 3 */\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data')\n  }\n\n  return [bytes.subarray(offset, postOffset), postOffset]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} index\n * @returns {[number, number, number]}\n */\nfunction decodeKey (bytes, index) {\n  let wire\n  ;[wire, index] = decodeVarint(bytes, index)\n  // [wireType, fieldNum, newIndex]\n  return [wire & 0x7, wire >> 3, index]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBLink}\n */\nfunction decodeLink (bytes) {\n  /** @type {RawPBLink} */\n  const link = {}\n  const l = bytes.length\n  let index = 0\n\n  while (index < l) {\n    let wireType, fieldNum\n    ;[wireType, fieldNum, index] = decodeKey(bytes, index)\n\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section')\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Hash`)\n      }\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash')\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash')\n      }\n\n      [link.Hash, index] = decodeBytes(bytes, index)\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section')\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Name`)\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name')\n      }\n\n      let byts\n      ;[byts, index] = decodeBytes(bytes, index)\n      link.Name = textDecoder.decode(byts)\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section')\n      }\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Tsize`)\n      }\n\n      [link.Tsize, index] = decodeVarint(bytes, index)\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${fieldNum}`)\n    }\n  }\n\n  /* c8 ignore next 3 */\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data')\n  }\n\n  return link\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBNode}\n */\nexport function decodeNode (bytes) {\n  const l = bytes.length\n  let index = 0\n  /** @type {RawPBLink[]|void} */\n  let links\n  let linksBeforeData = false\n  /** @type {Uint8Array|void} */\n  let data\n\n  while (index < l) {\n    let wireType, fieldNum\n    ;[wireType, fieldNum, index] = decodeKey(bytes, index)\n\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${wireType}`)\n    }\n\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section')\n      }\n\n      [data, index] = decodeBytes(bytes, index)\n      if (links) {\n        linksBeforeData = true\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) { // interleaved Links/Dode/Links\n        throw new Error('protobuf: (PBNode) duplicate Links section')\n      } else if (!links) {\n        links = []\n      }\n      let byts\n      ;[byts, index] = decodeBytes(bytes, index)\n      links.push(decodeLink(byts))\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${fieldNum}`)\n    }\n  }\n\n  /* c8 ignore next 3 */\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data')\n  }\n\n  /** @type {RawPBNode} */\n  const node = {}\n  if (data) {\n    node.Data = data\n  }\n  node.Links = links || []\n  return node\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}