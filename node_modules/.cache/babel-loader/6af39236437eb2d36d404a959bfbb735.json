{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/* global crypto */\n\nimport { from } from './hasher.js';\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nvar sha = function sha(name) {\n  return (\n    /*#__PURE__*/\n    /**\n     * @param {Uint8Array} data\n     */\n    function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = Uint8Array;\n                _context.next = 3;\n                return crypto.subtle.digest(name, data);\n              case 3:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", new _context.t0(_context.t1));\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n});\nexport var sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n});","map":{"version":3,"names":["from","sha","name","data","Uint8Array","crypto","subtle","digest","sha256","code","encode","sha512"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/multiformats/src/hashes/sha2-browser.js"],"sourcesContent":["/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n"],"mappings":";;AAAA;;AAEA,SAASA,IAAI,QAAQ,aAAa;;AAElC;AACA;AACA;AACA,IAAMC,GAAG,GAAG,SAANA,GAAG,CAAGC,IAAI;EAAA;IAAA;IACd;AACF;AACA;IAFE;MAAA,sEAGA,iBAAMC,IAAI;QAAA;UAAA;YAAA;cAAA;gBAAA,cAAQC,UAAU;gBAAA;gBAAA,OAAOC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACL,IAAI,EAAEC,IAAI,CAAC;cAAA;gBAAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAC;MAAA;QAAA;MAAA;IAAA;EAAA;AAAA;AAEtE,OAAO,IAAMK,MAAM,GAAGR,IAAI,CAAC;EACzBE,IAAI,EAAE,UAAU;EAChBO,IAAI,EAAE,IAAI;EACVC,MAAM,EAAET,GAAG,CAAC,SAAS;AACvB,CAAC,CAAC;AAEF,OAAO,IAAMU,MAAM,GAAGX,IAAI,CAAC;EACzBE,IAAI,EAAE,UAAU;EAChBO,IAAI,EAAE,IAAI;EACVC,MAAM,EAAET,GAAG,CAAC,SAAS;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}