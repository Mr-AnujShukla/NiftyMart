{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport var createWantlist = configure(function (api) {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  function wantlist() {\n    return _wantlist.apply(this, arguments);\n  }\n  function _wantlist() {\n    _wantlist = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('bitswap/wantlist', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers\n              });\n            case 3:\n              _context.next = 5;\n              return _context.sent.json();\n            case 5:\n              res = _context.sent;\n              return _context.abrupt(\"return\", (res.Keys || []).map(function ( /** @type {{ '/': string }} */k) {\n                return CID.parse(k['/']);\n              }));\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _wantlist.apply(this, arguments);\n  }\n  return wantlist;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createWantlist","api","wantlist","options","post","signal","searchParams","headers","json","res","Keys","map","k","parse"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/bitswap/wantlist.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlist = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlist\n})\n"],"mappings":";;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,cAAc,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;EAC7C;AACF;AACA;EAFE,SAGeC,QAAQ;IAAA;EAAA;EAAA;IAAA,uEAAvB;MAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAyBC,OAAO,2DAAG,CAAC,CAAC;cAAA;cAAA,OACVF,GAAG,CAACG,IAAI,CAAC,kBAAkB,EAAE;gBACpDC,MAAM,EAAEF,OAAO,CAACE,MAAM;gBACtBC,YAAY,EAAEP,iBAAiB,CAACI,OAAO,CAAC;gBACxCI,OAAO,EAAEJ,OAAO,CAACI;cACnB,CAAC,CAAC;YAAA;cAAA;cAAA,qBAAEC,IAAI;YAAA;cAJFC,GAAG;cAAA,iCAMF,CAACA,GAAG,CAACC,IAAI,IAAI,EAAE,EAAEC,GAAG,CAAC,WAAC,8BAA+BC,CAAC;gBAAA,OAAKf,GAAG,CAACgB,KAAK,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC;cAAA,EAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACrF;IAAA;EAAA;EACD,OAAOV,QAAQ;AACjB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}