{"ast":null,"code":"import _classCallCheck from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport errcode from 'err-code';\nimport * as Pb from './unixfs.js';\nvar PBData = Pb.Data;\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nvar types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nvar dirTypes = ['directory', 'hamt-sharded-directory'];\nvar DEFAULT_FILE_MODE = parseInt('0644', 8);\nvar DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n  if (typeof mode === 'number') {\n    return mode & 0xFFF;\n  }\n  mode = mode.toString();\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF;\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF;\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  /** @type {Mtime | undefined} */\n  var mtime;\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    var ms = input.getTime();\n    var secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n   // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n     mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n  return mtime;\n}\nvar UnixFS = /*#__PURE__*/function () {\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  function UnixFS() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      type: 'file'\n    };\n    _classCallCheck(this, UnixFS);\n    var type = options.type,\n      data = options.data,\n      blockSizes = options.blockSizes,\n      hashType = options.hashType,\n      fanout = options.fanout,\n      mtime = options.mtime,\n      mode = options.mode;\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  _createClass(UnixFS, [{\n    key: \"mode\",\n    get:\n    /**\n     * @returns {number | undefined}\n     */\n    function get() {\n      return this._mode;\n    },\n    set: function set(mode) {\n      this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n      var parsedMode = parseMode(mode);\n      if (parsedMode !== undefined) {\n        this._mode = parsedMode;\n      }\n    }\n  }, {\n    key: \"isDirectory\",\n    value: function isDirectory() {\n      return Boolean(this.type && dirTypes.includes(this.type));\n    }\n\n    /**\n     * @param {number} size\n     */\n  }, {\n    key: \"addBlockSize\",\n    value: function addBlockSize(size) {\n      this.blockSizes.push(size);\n    }\n\n    /**\n     * @param {number} index\n     */\n  }, {\n    key: \"removeBlockSize\",\n    value: function removeBlockSize(index) {\n      this.blockSizes.splice(index, 1);\n    }\n\n    /**\n     * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n     */\n  }, {\n    key: \"fileSize\",\n    value: function fileSize() {\n      if (this.isDirectory()) {\n        // dirs don't have file size\n        return 0;\n      }\n      var sum = 0;\n      this.blockSizes.forEach(function (size) {\n        sum += size;\n      });\n      if (this.data) {\n        sum += this.data.length;\n      }\n      return sum;\n    }\n\n    /**\n     * encode to protobuf Uint8Array\n     */\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      var type;\n      switch (this.type) {\n        case 'raw':\n          type = PBData.DataType.Raw;\n          break;\n        case 'directory':\n          type = PBData.DataType.Directory;\n          break;\n        case 'file':\n          type = PBData.DataType.File;\n          break;\n        case 'metadata':\n          type = PBData.DataType.Metadata;\n          break;\n        case 'symlink':\n          type = PBData.DataType.Symlink;\n          break;\n        case 'hamt-sharded-directory':\n          type = PBData.DataType.HAMTShard;\n          break;\n        default:\n          throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n      }\n      var data = this.data;\n      if (!this.data || !this.data.length) {\n        data = undefined;\n      }\n      var mode;\n      if (this.mode != null) {\n        mode = this._originalMode & 0xFFFFF000 | (parseMode(this.mode) || 0);\n        if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n          mode = undefined;\n        }\n        if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n          mode = undefined;\n        }\n      }\n      var mtime;\n      if (this.mtime != null) {\n        var parsed = parseMtime(this.mtime);\n        if (parsed) {\n          mtime = {\n            Seconds: parsed.secs,\n            FractionalNanoseconds: parsed.nsecs\n          };\n          if (mtime.FractionalNanoseconds === 0) {\n            delete mtime.FractionalNanoseconds;\n          }\n        }\n      }\n      var pbData = {\n        Type: type,\n        Data: data,\n        filesize: this.isDirectory() ? undefined : this.fileSize(),\n        blocksizes: this.blockSizes,\n        hashType: this.hashType,\n        fanout: this.fanout,\n        mode: mode,\n        mtime: mtime\n      };\n      return PBData.encode(pbData).finish();\n    }\n  }], [{\n    key: \"unmarshal\",\n    value:\n    /**\n     * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n     *\n     * @param {Uint8Array} marshaled\n     */\n    function unmarshal(marshaled) {\n      var message = PBData.decode(marshaled);\n      var decoded = PBData.toObject(message, {\n        defaults: false,\n        arrays: true,\n        longs: Number,\n        objects: false\n      });\n      var data = new UnixFS({\n        type: types[decoded.Type],\n        data: decoded.Data,\n        blockSizes: decoded.blocksizes,\n        mode: decoded.mode,\n        mtime: decoded.mtime ? {\n          secs: decoded.mtime.Seconds,\n          nsecs: decoded.mtime.FractionalNanoseconds\n        } : undefined\n      });\n\n      // make sure we honour the original mode\n      data._originalMode = decoded.mode || 0;\n      return data;\n    }\n  }]);\n  return UnixFS;\n}();\nexport { UnixFS };","map":{"version":3,"names":["errcode","Pb","PBData","Data","types","dirTypes","DEFAULT_FILE_MODE","parseInt","DEFAULT_DIRECTORY_MODE","parseMode","mode","undefined","toString","substring","parseMtime","input","mtime","secs","nsecs","Seconds","FractionalNanoseconds","Array","isArray","Date","ms","getTime","Math","floor","Object","prototype","hasOwnProperty","call","Error","UnixFS","options","type","data","blockSizes","hashType","fanout","includes","_originalMode","_mode","isDirectory","parsedMode","Boolean","size","push","index","splice","sum","forEach","length","DataType","Raw","Directory","File","Metadata","Symlink","HAMTShard","parsed","pbData","Type","filesize","fileSize","blocksizes","encode","finish","marshaled","message","decode","decoded","toObject","defaults","arrays","longs","Number","objects"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-unixfs/src/index.js"],"sourcesContent":["import errcode from 'err-code'\nimport * as Pb from './unixfs.js'\nconst PBData = Pb.Data\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF\n  }\n\n  mode = mode.toString()\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal (marshaled) {\n    const message = PBData.decode(marshaled)\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    })\n\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime\n        ? {\n            secs: decoded.mtime.Seconds,\n            nsecs: decoded.mtime.FractionalNanoseconds\n          }\n        : undefined\n    })\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0\n\n    return data\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor (options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type || 'file'\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || []\n    this._originalMode = 0\n    this.mode = parseMode(mode)\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime)\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode (mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode () {\n    return this._mode\n  }\n\n  isDirectory () {\n    return Boolean(this.type && dirTypes.includes(this.type))\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = PBData.DataType.Raw; break\n      case 'directory': type = PBData.DataType.Directory; break\n      case 'file': type = PBData.DataType.File; break\n      case 'metadata': type = PBData.DataType.Metadata; break\n      case 'symlink': type = PBData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = PBData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | (parseMode(this.mode) || 0)\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    }\n\n    return PBData.encode(pbData).finish()\n  }\n}\n\nexport { UnixFS }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}