{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport var createGet = configure(function (api) {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n  function _get() {\n    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n      var options,\n        res,\n        data,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('object/get', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(cid instanceof Uint8Array ? CID.decode(cid) : cid),\n                  dataEncoding: 'base64'\n                }, options)),\n                headers: options.headers\n              });\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n            case 6:\n              data = _context.sent;\n              return _context.abrupt(\"return\", {\n                Data: uint8ArrayFromString(data.Data, 'base64pad'),\n                Links: (data.Links || []).map(function ( /** @type {any} */link) {\n                  return {\n                    Name: link.Name,\n                    Hash: CID.parse(link.Hash),\n                    Tsize: link.Size\n                  };\n                })\n              });\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _get.apply(this, arguments);\n  }\n  return get;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","fromString","uint8ArrayFromString","createGet","api","get","cid","options","post","signal","searchParams","arg","Uint8Array","decode","dataEncoding","headers","res","json","data","Data","Links","map","link","Name","Hash","parse","Tsize","Size"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/object/get.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n"],"mappings":";;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;;AAE5E;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,SAAS,GAAGJ,SAAS,CAAC,UAAAK,GAAG,EAAI;EACxC;AACF;AACA;EAFE,SAGeC,GAAG;IAAA;EAAA;EAAA;IAAA,kEAAlB,iBAAoBC,GAAG;MAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cAAA;cAAA,OACjBH,GAAG,CAACI,IAAI,CAAC,YAAY,EAAE;gBACvCC,MAAM,EAAEF,OAAO,CAACE,MAAM;gBACtBC,YAAY,EAAEV,iBAAiB;kBAC7BW,GAAG,YAAKL,GAAG,YAAYM,UAAU,GAAGd,GAAG,CAACe,MAAM,CAACP,GAAG,CAAC,GAAGA,GAAG,CAAE;kBAC3DQ,YAAY,EAAE;gBAAQ,GACnBP,OAAO,EACV;gBACFQ,OAAO,EAAER,OAAO,CAACQ;cACnB,CAAC,CAAC;YAAA;cARIC,GAAG;cAAA;cAAA,OASUA,GAAG,CAACC,IAAI,EAAE;YAAA;cAAvBC,IAAI;cAAA,iCAEH;gBACLC,IAAI,EAAEjB,oBAAoB,CAACgB,IAAI,CAACC,IAAI,EAAE,WAAW,CAAC;gBAClDC,KAAK,EAAE,CAACF,IAAI,CAACE,KAAK,IAAI,EAAE,EAAEC,GAAG,CAAC,WAAC,kBAAmBC,IAAI;kBAAA,OAAM;oBAC1DC,IAAI,EAAED,IAAI,CAACC,IAAI;oBACfC,IAAI,EAAE1B,GAAG,CAAC2B,KAAK,CAACH,IAAI,CAACE,IAAI,CAAC;oBAC1BE,KAAK,EAAEJ,IAAI,CAACK;kBACd,CAAC;gBAAA,CAAC;cACJ,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACF;IAAA;EAAA;EACD,OAAOtB,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}