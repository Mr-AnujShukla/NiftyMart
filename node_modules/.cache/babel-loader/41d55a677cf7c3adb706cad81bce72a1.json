{"ast":null,"code":"import _slicedToArray from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { fromBase64url, toBase64url } from './utils.js';\nimport { CID } from 'multiformats/cid';\nexport function fromSplit(split) {\n  var _split = _slicedToArray(split, 3),\n    protectedHeader = _split[0],\n    payload = _split[1],\n    signature = _split[2];\n  return {\n    payload: payload,\n    signatures: [{\n      protected: protectedHeader,\n      signature: signature\n    }],\n    link: CID.decode(fromBase64url(payload))\n  };\n}\nfunction encodeSignature(signature) {\n  var encoded = {\n    signature: fromBase64url(signature.signature)\n  };\n  if (signature.header) encoded.header = signature.header;\n  if (signature.protected) encoded.protected = fromBase64url(signature.protected);\n  return encoded;\n}\nexport function encode(jws) {\n  var payload = fromBase64url(jws.payload);\n  try {\n    CID.decode(payload);\n  } catch (e) {\n    throw new Error('Not a valid DagJWS');\n  }\n  return {\n    payload: payload,\n    signatures: jws.signatures.map(encodeSignature)\n  };\n}\nfunction decodeSignature(encoded) {\n  var sign = {\n    signature: toBase64url(encoded.signature)\n  };\n  if (encoded.header) sign.header = encoded.header;\n  if (encoded.protected) sign.protected = toBase64url(encoded.protected);\n  return sign;\n}\nexport function decode(encoded) {\n  var decoded = {\n    payload: toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature)\n  };\n  decoded.link = CID.decode(new Uint8Array(encoded.payload));\n  return decoded;\n}","map":{"version":3,"mappings":";AAAA,SAASA,aAAa,EAAEC,WAAW,QAAQ,YAAY;AACvD,SAASC,GAAG,QAAQ,kBAAkB;AAiCtC,OAAM,SAAUC,SAAS,CAACC,KAAoB;EAC5C,4BAA8CA,KAAK;IAA5CC,eAAe;IAAEC,OAAO;IAAEC,SAAS;EAC1C,OAAO;IACLD,OAAO,EAAPA,OAAO;IACPE,UAAU,EAAE,CAAC;MAAEC,SAAS,EAAEJ,eAAe;MAAEE,SAAS,EAATA;IAAS,CAAE,CAAC;IACvDG,IAAI,EAAER,GAAG,CAACS,MAAM,CAACX,aAAa,CAACM,OAAO,CAAC;GACxC;AACH;AAEA,SAASM,eAAe,CAACL,SAAuB;EAC9C,IAAMM,OAAO,GAAqB;IAChCN,SAAS,EAAEP,aAAa,CAACO,SAAS,CAACA,SAAS;GAC7C;EACD,IAAIA,SAAS,CAACO,MAAM,EAAED,OAAO,CAACC,MAAM,GAAGP,SAAS,CAACO,MAAM;EACvD,IAAIP,SAAS,CAACE,SAAS,EAAEI,OAAO,CAACJ,SAAS,GAAGT,aAAa,CAACO,SAAS,CAACE,SAAS,CAAC;EAC/E,OAAOI,OAAO;AAChB;AAEA,OAAM,SAAUE,MAAM,CAACC,GAAW;EAChC,IAAMV,OAAO,GAAGN,aAAa,CAACgB,GAAG,CAACV,OAAO,CAAC;EAC1C,IAAI;IACFJ,GAAG,CAACS,MAAM,CAACL,OAAO,CAAC;GACpB,CAAC,OAAOW,CAAC,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;;EAEvC,OAAO;IACLZ,OAAO,EAAPA,OAAO;IACPE,UAAU,EAAEQ,GAAG,CAACR,UAAU,CAACW,GAAG,CAACP,eAAe;GAC/C;AACH;AAEA,SAASQ,eAAe,CAACP,OAAyB;EAChD,IAAMQ,IAAI,GAAiB;IACzBd,SAAS,EAAEN,WAAW,CAACY,OAAO,CAACN,SAAS;GACzC;EACD,IAAIM,OAAO,CAACC,MAAM,EAAEO,IAAI,CAACP,MAAM,GAAGD,OAAO,CAACC,MAAM;EAChD,IAAID,OAAO,CAACJ,SAAS,EAAEY,IAAI,CAACZ,SAAS,GAAGR,WAAW,CAACY,OAAO,CAACJ,SAAS,CAAC;EACtE,OAAOY,IAAI;AACb;AAEA,OAAM,SAAUV,MAAM,CAACE,OAAmB;EACxC,IAAMS,OAAO,GAAW;IACtBhB,OAAO,EAAEL,WAAW,CAACY,OAAO,CAACP,OAAO,CAAC;IACrCE,UAAU,EAAEK,OAAO,CAACL,UAAU,CAACW,GAAG,CAACC,eAAe;GACnD;EACDE,OAAO,CAACZ,IAAI,GAAGR,GAAG,CAACS,MAAM,CAAC,IAAIY,UAAU,CAACV,OAAO,CAACP,OAAO,CAAC,CAAC;EAC1D,OAAOgB,OAAO;AAChB","names":["fromBase64url","toBase64url","CID","fromSplit","split","protectedHeader","payload","signature","signatures","protected","link","decode","encodeSignature","encoded","header","encode","jws","e","Error","map","decodeSignature","sign","decoded","Uint8Array"],"sources":["../src/signing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}