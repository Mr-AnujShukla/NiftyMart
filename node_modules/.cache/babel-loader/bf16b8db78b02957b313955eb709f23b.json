{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { objectToCamel } from './lib/object-to-camel.js';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport var createId = configure(function (api) {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  function id() {\n    return _id.apply(this, arguments);\n  }\n  function _id() {\n    _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        res,\n        data,\n        output,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('id', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: options.peerId ? options.peerId.toString() : undefined\n                }, options)),\n                headers: options.headers\n              });\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n            case 6:\n              data = _context.sent;\n              output = _objectSpread({}, objectToCamel(data));\n              output.id = peerIdFromString(output.id);\n              if (output.addresses) {\n                output.addresses = output.addresses.map(function ( /** @type {string} */ma) {\n                  return multiaddr(ma);\n                });\n              }\n\n              // @ts-expect-error server output is not typed\n              return _context.abrupt(\"return\", output);\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _id.apply(this, arguments);\n  }\n  return id;\n});","map":{"version":3,"names":["objectToCamel","multiaddr","configure","toUrlSearchParams","peerIdFromString","createId","api","id","options","post","signal","searchParams","arg","peerId","toString","undefined","headers","res","json","data","output","addresses","map","ma"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/id.js"],"sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...objectToCamel(data)\n    }\n\n    output.id = peerIdFromString(output.id)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => multiaddr(ma))\n    }\n\n    // @ts-expect-error server output is not typed\n    return output\n  }\n  return id\n})\n"],"mappings":";;;AAAA,SAASA,aAAa,QAAQ,0BAA0B;AACxD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,iBAAiB,QAAQ,+BAA+B;AACjE,SAASC,gBAAgB,QAAQ,iBAAiB;;AAElD;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,QAAQ,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EACvC;AACF;AACA;EAFE,SAGeC,EAAE;IAAA;EAAA;EAAA;IAAA,iEAAjB;MAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAmBC,OAAO,2DAAG,CAAC,CAAC;cAAA;cAAA,OACXF,GAAG,CAACG,IAAI,CAAC,IAAI,EAAE;gBAC/BC,MAAM,EAAEF,OAAO,CAACE,MAAM;gBACtBC,YAAY,EAAER,iBAAiB;kBAC7BS,GAAG,EAAEJ,OAAO,CAACK,MAAM,GAAGL,OAAO,CAACK,MAAM,CAACC,QAAQ,EAAE,GAAGC;gBAAS,GACxDP,OAAO,EACV;gBACFQ,OAAO,EAAER,OAAO,CAACQ;cACnB,CAAC,CAAC;YAAA;cAPIC,GAAG;cAAA;cAAA,OAQUA,GAAG,CAACC,IAAI,EAAE;YAAA;cAAvBC,IAAI;cAEJC,MAAM,qBACPpB,aAAa,CAACmB,IAAI,CAAC;cAGxBC,MAAM,CAACb,EAAE,GAAGH,gBAAgB,CAACgB,MAAM,CAACb,EAAE,CAAC;cAEvC,IAAIa,MAAM,CAACC,SAAS,EAAE;gBACpBD,MAAM,CAACC,SAAS,GAAGD,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,WAAC,qBAAsBC,EAAE;kBAAA,OAAKtB,SAAS,CAACsB,EAAE,CAAC;gBAAA,EAAC;cACtF;;cAEA;cAAA,iCACOH,MAAM;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACd;IAAA;EAAA;EACD,OAAOb,EAAE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"module"}