{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {AbortOptions} [options]\n */\nexport function resolve(_x, _x2, _x3, _x4, _x5) {\n  return _resolve.apply(this, arguments);\n}\nfunction _resolve() {\n  _resolve = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(cid, path, codecs, getBlock, options) {\n    var load, parts, value, lastCid, key, _cid;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            /**\n             * @param {CID} cid\n             */\n            load = /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n                var codec, block;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return codecs.getCodec(cid.code);\n                      case 2:\n                        codec = _context.sent;\n                        _context.next = 5;\n                        return getBlock(cid, options);\n                      case 5:\n                        block = _context.sent;\n                        return _context.abrupt(\"return\", codec.decode(block));\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n              return function load(_x6) {\n                return _ref.apply(this, arguments);\n              };\n            }();\n            parts = path.split('/').filter(Boolean);\n            _context2.next = 4;\n            return _awaitAsyncGenerator(load(cid));\n          case 4:\n            value = _context2.sent;\n            lastCid = cid; // End iteration if there isn't a CID to follow any more\n          case 6:\n            if (!parts.length) {\n              _context2.next = 25;\n              break;\n            }\n            key = parts.shift();\n            if (key) {\n              _context2.next = 10;\n              break;\n            }\n            throw errCode(new Error(\"Could not resolve path \\\"\".concat(path, \"\\\"\")), 'ERR_INVALID_PATH');\n          case 10:\n            if (!Object.prototype.hasOwnProperty.call(value, key)) {\n              _context2.next = 16;\n              break;\n            }\n            value = value[key];\n            _context2.next = 14;\n            return {\n              value: value,\n              remainderPath: parts.join('/')\n            };\n          case 14:\n            _context2.next = 17;\n            break;\n          case 16:\n            throw errCode(new Error(\"no link named \\\"\".concat(key, \"\\\" under \").concat(lastCid)), 'ERR_NO_LINK');\n          case 17:\n            _cid = CID.asCID(value);\n            if (!_cid) {\n              _context2.next = 23;\n              break;\n            }\n            lastCid = _cid;\n            _context2.next = 22;\n            return _awaitAsyncGenerator(load(value));\n          case 22:\n            value = _context2.sent;\n          case 23:\n            _context2.next = 6;\n            break;\n          case 25:\n            _context2.next = 27;\n            return {\n              value: value,\n              remainderPath: ''\n            };\n          case 27:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _resolve.apply(this, arguments);\n}","map":{"version":3,"names":["CID","errCode","resolve","cid","path","codecs","getBlock","options","load","getCodec","code","codec","block","decode","parts","split","filter","Boolean","value","lastCid","length","key","shift","Error","Object","prototype","hasOwnProperty","call","remainderPath","join","asCID"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/lib/resolve.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {AbortOptions} [options]\n */\nexport async function * resolve (cid, path, codecs, getBlock, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await getBlock(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    const cid = CID.asCID(value)\n\n    if (cid) {\n      lastCid = cid\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n"],"mappings":";;;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,OAAOC,OAAO,MAAM,UAAU;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAwBC,OAAO;EAAA;AAAA;AA8C9B;EAAA,wEA9CM,kBAA0BC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YACnE;AACF;AACA;YACQC,IAAI;cAAA,sEAAG,iBAAOL,GAAG;gBAAA;gBAAA;kBAAA;oBAAA;sBAAA;wBAAA;wBAAA,OACDE,MAAM,CAACI,QAAQ,CAACN,GAAG,CAACO,IAAI,CAAC;sBAAA;wBAAvCC,KAAK;wBAAA;wBAAA,OACSL,QAAQ,CAACH,GAAG,EAAEI,OAAO,CAAC;sBAAA;wBAApCK,KAAK;wBAAA,iCAEJD,KAAK,CAACE,MAAM,CAACD,KAAK,CAAC;sBAAA;sBAAA;wBAAA;oBAAA;kBAAA;gBAAA;cAAA,CAC3B;cAAA,gBALKJ,IAAI;gBAAA;cAAA;YAAA;YAOJM,KAAK,GAAGV,IAAI,CAACW,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;YAAA;YAAA,4BAC3BT,IAAI,CAACL,GAAG,CAAC;UAAA;YAAvBe,KAAK;YACLC,OAAO,GAAGhB,GAAG,EAEjB;UAAA;YAAA,KACOW,KAAK,CAACM,MAAM;cAAA;cAAA;YAAA;YACXC,GAAG,GAAGP,KAAK,CAACQ,KAAK,EAAE;YAAA,IAEpBD,GAAG;cAAA;cAAA;YAAA;YAAA,MACApB,OAAO,CAAC,IAAIsB,KAAK,oCAA4BnB,IAAI,QAAI,EAAE,kBAAkB,CAAC;UAAA;YAAA,KAG9EoB,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACT,KAAK,EAAEG,GAAG,CAAC;cAAA;cAAA;YAAA;YAClDH,KAAK,GAAGA,KAAK,CAACG,GAAG,CAAC;YAAA;YAElB,OAAM;cACJH,KAAK,EAALA,KAAK;cACLU,aAAa,EAAEd,KAAK,CAACe,IAAI,CAAC,GAAG;YAC/B,CAAC;UAAA;YAAA;YAAA;UAAA;YAAA,MAEK5B,OAAO,CAAC,IAAIsB,KAAK,2BAAmBF,GAAG,sBAAWF,OAAO,EAAG,EAAE,aAAa,CAAC;UAAA;YAG9EhB,IAAG,GAAGH,GAAG,CAAC8B,KAAK,CAACZ,KAAK,CAAC;YAAA,KAExBf,IAAG;cAAA;cAAA;YAAA;YACLgB,OAAO,GAAGhB,IAAG;YAAA;YAAA,4BACCK,IAAI,CAACU,KAAK,CAAC;UAAA;YAAzBA,KAAK;UAAA;YAAA;YAAA;UAAA;YAAA;YAIT,OAAM;cACJA,KAAK,EAALA,KAAK;cACLU,aAAa,EAAE;YACjB,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACF;EAAA;AAAA"},"metadata":{},"sourceType":"module"}