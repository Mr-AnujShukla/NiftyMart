{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport var createImport = configure(function (api) {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  function dagImport(_x) {\n    return _dagImport.apply(this, arguments);\n  }\n  function _dagImport() {\n    _dagImport = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n      var options,\n        controller,\n        signal,\n        _yield$_awaitAsyncGen,\n        headers,\n        body,\n        res,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        Root,\n        Cid,\n        PinErrorMsg,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.next = 5;\n              return _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n            case 5:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              _context.next = 10;\n              return _awaitAsyncGenerator(api.post('dag/import', {\n                signal: signal,\n                headers: headers,\n                body: body,\n                searchParams: toUrlSearchParams({\n                  'pin-roots': options.pinRoots\n                })\n              }));\n            case 10:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 13;\n              _iterator = _asyncIterator(res.ndjson());\n            case 15:\n              _context.next = 17;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 17:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 26;\n                break;\n              }\n              Root = _step.value.Root;\n              if (!(Root !== undefined)) {\n                _context.next = 23;\n                break;\n              }\n              Cid = Root.Cid['/'], PinErrorMsg = Root.PinErrorMsg;\n              _context.next = 23;\n              return {\n                root: {\n                  cid: CID.parse(Cid),\n                  pinErrorMsg: PinErrorMsg\n                }\n              };\n            case 23:\n              _iteratorAbruptCompletion = false;\n              _context.next = 15;\n              break;\n            case 26:\n              _context.next = 32;\n              break;\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](13);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 32:\n              _context.prev = 32;\n              _context.prev = 33;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 37;\n                break;\n              }\n              _context.next = 37;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 37:\n              _context.prev = 37;\n              if (!_didIteratorError) {\n                _context.next = 40;\n                break;\n              }\n              throw _iteratorError;\n            case 40:\n              return _context.finish(37);\n            case 41:\n              return _context.finish(32);\n            case 42:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[13, 28, 32, 42], [33,, 37, 41]]);\n    }));\n    return _dagImport.apply(this, arguments);\n  }\n  return dagImport;\n});","map":{"version":3,"names":["configure","toUrlSearchParams","abortSignal","multipartRequest","CID","createImport","api","dagImport","source","options","controller","AbortController","signal","headers","body","post","searchParams","pinRoots","res","ndjson","Root","undefined","Cid","PinErrorMsg","root","cid","parse","pinErrorMsg"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/dag/import.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n"],"mappings":";;;;AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,GAAG,QAAQ,kBAAkB;;AAEtC;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,YAAY,GAAGL,SAAS,CAAC,UAAAM,GAAG,EAAI;EAC3C;AACF;AACA;EAFE,SAGiBC,SAAS;IAAA;EAAA;EAAA;IAAA,0EAA1B,iBAA4BC,MAAM;MAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cACxCC,UAAU,GAAG,IAAIC,eAAe,EAAE;cAClCC,MAAM,GAAGV,WAAW,CAACQ,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC;cAAA;cAAA,4BAC7BT,gBAAgB,CAACK,MAAM,EAAEE,UAAU,EAAED,OAAO,CAACI,OAAO,CAAC;YAAA;cAAA;cAA7EA,OAAO,yBAAPA,OAAO;cAAEC,IAAI,yBAAJA,IAAI;cAAA;cAAA,4BAEHR,GAAG,CAACS,IAAI,CAAC,YAAY,EAAE;gBACvCH,MAAM,EAANA,MAAM;gBACNC,OAAO,EAAPA,OAAO;gBACPC,IAAI,EAAJA,IAAI;gBACJE,YAAY,EAAEf,iBAAiB,CAAC;kBAAE,WAAW,EAAEQ,OAAO,CAACQ;gBAAS,CAAC;cACnE,CAAC,CAAC;YAAA;cALIC,GAAG;cAAA;cAAA;cAAA;cAAA,2BAOoBA,GAAG,CAACC,MAAM,EAAE;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAtBC,IAAI,eAAJA,IAAI;cAAA,MACjBA,IAAI,KAAKC,SAAS;gBAAA;gBAAA;cAAA;cACAC,GAAG,GAAoBF,IAAI,CAAvCE,GAAG,CAAI,GAAG,GAASC,WAAW,GAAKH,IAAI,CAApBG,WAAW;cAAA;cAEtC,OAAM;gBACJC,IAAI,EAAE;kBACJC,GAAG,EAAErB,GAAG,CAACsB,KAAK,CAACJ,GAAG,CAAC;kBACnBK,WAAW,EAAEJ;gBACf;cACF,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAGN;IAAA;EAAA;EAED,OAAOhB,SAAS;AAClB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}