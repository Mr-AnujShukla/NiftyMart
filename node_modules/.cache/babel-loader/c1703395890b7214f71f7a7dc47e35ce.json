{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\nvar LOAD_BASE = function LOAD_BASE(name) {\n  return Promise.reject(new Error(\"No base found for \\\"\".concat(name, \"\\\"\")));\n};\nexport var Multibases = /*#__PURE__*/function () {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  function Multibases(options) {\n    _classCallCheck(this, Multibases);\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {};\n\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n\n    // Enable all supplied codecs\n    var _iterator = _createForOfIteratorHelper(options.bases),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var base = _step.value;\n        this.addBase(base);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  _createClass(Multibases, [{\n    key: \"addBase\",\n    value: function addBase(base) {\n      if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n        throw new Error(\"Codec already exists for codec \\\"\".concat(base.name, \"\\\"\"));\n      }\n      this._basesByName[base.name] = base;\n      this._basesByPrefix[base.prefix] = base;\n    }\n\n    /**\n     * Remove support for a multibase codec\n     *\n     * @param {MultibaseCodec} base\n     */\n  }, {\n    key: \"removeBase\",\n    value: function removeBase(base) {\n      delete this._basesByName[base.name];\n      delete this._basesByPrefix[base.prefix];\n    }\n\n    /**\n     * @param {string} nameOrPrefix\n     */\n  }, {\n    key: \"getBase\",\n    value: function () {\n      var _getBase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(nameOrPrefix) {\n        var base;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._basesByName[nameOrPrefix]) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\", this._basesByName[nameOrPrefix]);\n              case 2:\n                if (!this._basesByPrefix[nameOrPrefix]) {\n                  _context.next = 4;\n                  break;\n                }\n                return _context.abrupt(\"return\", this._basesByPrefix[nameOrPrefix]);\n              case 4:\n                _context.next = 6;\n                return this._loadBase(nameOrPrefix);\n              case 6:\n                base = _context.sent;\n                if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n                  this.addBase(base);\n                }\n                return _context.abrupt(\"return\", base);\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getBase(_x) {\n        return _getBase.apply(this, arguments);\n      }\n      return getBase;\n    }()\n  }, {\n    key: \"listBases\",\n    value: function listBases() {\n      return Object.values(this._basesByName);\n    }\n  }]);\n  return Multibases;\n}();","map":{"version":3,"names":["LOAD_BASE","name","Promise","reject","Error","Multibases","options","_basesByName","_basesByPrefix","_loadBase","loadBase","bases","base","addBase","prefix","nameOrPrefix","Object","values"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-core-utils/src/multibases.js"],"sourcesContent":["/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\nconst LOAD_BASE = (name) => Promise.reject(new Error(`No base found for \"${name}\"`))\n\nexport class Multibases {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByPrefix = {}\n\n    this._loadBase = options.loadBase || LOAD_BASE\n\n    // Enable all supplied codecs\n    for (const base of options.bases) {\n      this.addBase(base)\n    }\n  }\n\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  addBase (base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`)\n    }\n\n    this._basesByName[base.name] = base\n    this._basesByPrefix[base.prefix] = base\n  }\n\n  /**\n   * Remove support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  removeBase (base) {\n    delete this._basesByName[base.name]\n    delete this._basesByPrefix[base.prefix]\n  }\n\n  /**\n   * @param {string} nameOrPrefix\n   */\n  async getBase (nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix]\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const base = await this._loadBase(nameOrPrefix)\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base)\n    }\n\n    return base\n  }\n\n  listBases () {\n    return Object.values(this._basesByName)\n  }\n}\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAMA,SAAS,GAAG,SAAZA,SAAS,CAAIC,IAAI;EAAA,OAAKC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,+BAAuBH,IAAI,QAAI,CAAC;AAAA;AAEpF,WAAaI,UAAU;EACrB;AACF;AACA;AACA;AACA;EACE,oBAAaC,OAAO,EAAE;IAAA;IACpB;IACA;IACA,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;;IAEtB;IACA;IACA,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC;IAExB,IAAI,CAACC,SAAS,GAAGH,OAAO,CAACI,QAAQ,IAAIV,SAAS;;IAE9C;IAAA,2CACmBM,OAAO,CAACK,KAAK;MAAA;IAAA;MAAhC,oDAAkC;QAAA,IAAvBC,IAAI;QACb,IAAI,CAACC,OAAO,CAACD,IAAI,CAAC;MACpB;IAAC;MAAA;IAAA;MAAA;IAAA;EACH;;EAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,iBAASA,IAAI,EAAE;MACb,IAAI,IAAI,CAACL,YAAY,CAACK,IAAI,CAACX,IAAI,CAAC,IAAI,IAAI,CAACO,cAAc,CAACI,IAAI,CAACE,MAAM,CAAC,EAAE;QACpE,MAAM,IAAIV,KAAK,4CAAoCQ,IAAI,CAACX,IAAI,QAAI;MAClE;MAEA,IAAI,CAACM,YAAY,CAACK,IAAI,CAACX,IAAI,CAAC,GAAGW,IAAI;MACnC,IAAI,CAACJ,cAAc,CAACI,IAAI,CAACE,MAAM,CAAC,GAAGF,IAAI;IACzC;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,oBAAYA,IAAI,EAAE;MAChB,OAAO,IAAI,CAACL,YAAY,CAACK,IAAI,CAACX,IAAI,CAAC;MACnC,OAAO,IAAI,CAACO,cAAc,CAACI,IAAI,CAACE,MAAM,CAAC;IACzC;;IAEA;AACF;AACA;EAFE;IAAA;IAAA;MAAA,0EAGA,iBAAeC,YAAY;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,KACrB,IAAI,CAACR,YAAY,CAACQ,YAAY,CAAC;kBAAA;kBAAA;gBAAA;gBAAA,iCAC1B,IAAI,CAACR,YAAY,CAACQ,YAAY,CAAC;cAAA;gBAAA,KAGpC,IAAI,CAACP,cAAc,CAACO,YAAY,CAAC;kBAAA;kBAAA;gBAAA;gBAAA,iCAC5B,IAAI,CAACP,cAAc,CAACO,YAAY,CAAC;cAAA;gBAAA;gBAAA,OAIvB,IAAI,CAACN,SAAS,CAACM,YAAY,CAAC;cAAA;gBAAzCH,IAAI;gBAEV,IAAI,IAAI,CAACL,YAAY,CAACK,IAAI,CAACX,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,CAACO,cAAc,CAACI,IAAI,CAACE,MAAM,CAAC,IAAI,IAAI,EAAE;kBACpF,IAAI,CAACD,OAAO,CAACD,IAAI,CAAC;gBACpB;gBAAC,iCAEMA,IAAI;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACZ;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,qBAAa;MACX,OAAOI,MAAM,CAACC,MAAM,CAAC,IAAI,CAACV,YAAY,CAAC;IACzC;EAAC;EAAA;AAAA"},"metadata":{},"sourceType":"module"}