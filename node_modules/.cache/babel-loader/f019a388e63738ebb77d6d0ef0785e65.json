{"ast":null,"code":"/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function* browserReadableStreamToIt(stream) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const result = await reader.read();\n      if (result.done) {\n        return;\n      }\n      yield result.value;\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      await reader.cancel();\n    }\n    reader.releaseLock();\n  }\n}","map":{"version":3,"mappings":"AAKA;;;;;;;AAOA,eAAe,gBAAiBA,yBAAyB,CAAMC,MAAyB,EAAgD;EAAA,IAA9CC,8EAA4C,EAAE;EACtI,MAAMC,MAAM,GAAGF,MAAM,CAACG,SAAS,EAAE;EAEjC,IAAI;IACF,OAAO,IAAI,EAAE;MACX,MAAMC,MAAM,GAAG,MAAMF,MAAM,CAACG,IAAI,EAAE;MAElC,IAAID,MAAM,CAACE,IAAI,EAAE;QACf;;MAGF,MAAMF,MAAM,CAACG,KAAK;;GAErB,SAAS;IACR,IAAIN,OAAO,CAACO,aAAa,KAAK,IAAI,EAAE;MAClC,MAAMN,MAAM,CAACO,MAAM,EAAE;;IAGvBP,MAAM,CAACQ,WAAW,EAAE;;AAExB","names":["browserReadableStreamToIt","stream","options","reader","getReader","result","read","done","value","preventCancel","cancel","releaseLock"],"sources":["C:\\Users\\HP\\Desktop\\my_workspace\\hackathon\\NFT\\Pixelate\\node_modules\\browser-readablestream-to-it\\src\\index.ts"],"sourcesContent":["\nexport interface BrowserReadableStreamToItOptions {\n  preventCancel?: boolean\n}\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function * browserReadableStreamToIt <T> (stream: ReadableStream<T>, options: BrowserReadableStreamToItOptions = {}): AsyncGenerator<T, void, undefined> {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      await reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}