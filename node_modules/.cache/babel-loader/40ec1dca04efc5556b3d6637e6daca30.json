{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { createStat } from './files/stat.js';\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport var createLs = configure(function (api, opts) {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n  function _ls() {\n    _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(path) {\n      var options,\n        pathStr,\n        mapLink,\n        _mapLink,\n        res,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        result,\n        links,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _mapLink = function _mapLink3() {\n                _mapLink = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(link) {\n                  var hash, ipfsPath, stats, entry;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          hash = link.Hash;\n                          if (!hash.includes('/')) {\n                            _context.next = 9;\n                            break;\n                          }\n                          // the hash is a path, but we need the CID\n                          ipfsPath = hash.startsWith('/ipfs/') ? hash : \"/ipfs/\".concat(hash);\n                          _context.next = 5;\n                          return createStat(opts)(ipfsPath);\n                        case 5:\n                          stats = _context.sent;\n                          hash = stats.cid;\n                          _context.next = 10;\n                          break;\n                        case 9:\n                          hash = CID.parse(hash);\n                        case 10:\n                          /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n                          entry = {\n                            name: link.Name,\n                            path: pathStr + (link.Name ? \"/\".concat(link.Name) : ''),\n                            size: link.Size,\n                            cid: hash,\n                            type: typeOf(link)\n                          };\n                          if (link.Mode) {\n                            entry.mode = parseInt(link.Mode, 8);\n                          }\n                          if (link.Mtime !== undefined && link.Mtime !== null) {\n                            entry.mtime = {\n                              secs: link.Mtime\n                            };\n                            if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n                              entry.mtime.nsecs = link.MtimeNsecs;\n                            }\n                          }\n                          return _context.abrupt(\"return\", entry);\n                        case 14:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n                return _mapLink.apply(this, arguments);\n              };\n              mapLink = function _mapLink2(_x2) {\n                return _mapLink.apply(this, arguments);\n              };\n              options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n              pathStr = \"\".concat(path instanceof Uint8Array ? CID.decode(path) : path);\n              /**\n               * @param {*} link\n               */\n              _context2.next = 6;\n              return _awaitAsyncGenerator(api.post('ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: pathStr\n                }, options)),\n                headers: options.headers\n              }));\n            case 6:\n              res = _context2.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context2.prev = 9;\n              _iterator = _asyncIterator(res.ndjson());\n            case 11:\n              _context2.next = 13;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 13:\n              if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                _context2.next = 32;\n                break;\n              }\n              result = _step.value;\n              result = result.Objects;\n              if (result) {\n                _context2.next = 18;\n                break;\n              }\n              throw new Error('expected .Objects in results');\n            case 18:\n              result = result[0];\n              if (result) {\n                _context2.next = 21;\n                break;\n              }\n              throw new Error('expected one array in results.Objects');\n            case 21:\n              links = result.Links;\n              if (Array.isArray(links)) {\n                _context2.next = 24;\n                break;\n              }\n              throw new Error('expected one array in results.Objects[0].Links');\n            case 24:\n              if (links.length) {\n                _context2.next = 28;\n                break;\n              }\n              _context2.next = 27;\n              return mapLink(result);\n            case 27:\n              return _context2.abrupt(\"return\");\n            case 28:\n              return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(links.map(mapLink)), _awaitAsyncGenerator), \"t0\", 29);\n            case 29:\n              _iteratorAbruptCompletion = false;\n              _context2.next = 11;\n              break;\n            case 32:\n              _context2.next = 38;\n              break;\n            case 34:\n              _context2.prev = 34;\n              _context2.t1 = _context2[\"catch\"](9);\n              _didIteratorError = true;\n              _iteratorError = _context2.t1;\n            case 38:\n              _context2.prev = 38;\n              _context2.prev = 39;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context2.next = 43;\n                break;\n              }\n              _context2.next = 43;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 43:\n              _context2.prev = 43;\n              if (!_didIteratorError) {\n                _context2.next = 46;\n                break;\n              }\n              throw _iteratorError;\n            case 46:\n              return _context2.finish(43);\n            case 47:\n              return _context2.finish(38);\n            case 48:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[9, 34, 38, 48], [39,, 43, 47]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n  return ls;\n});\n\n/**\n * @param {any} link\n */\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n    case 2:\n      return 'file';\n    default:\n      return 'file';\n  }\n}","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createStat","createLs","api","opts","ls","path","mapLink","link","hash","Hash","includes","ipfsPath","startsWith","stats","cid","parse","entry","name","Name","pathStr","size","Size","type","typeOf","Mode","mode","parseInt","Mtime","undefined","mtime","secs","MtimeNsecs","nsecs","options","Uint8Array","decode","post","signal","searchParams","arg","headers","res","ndjson","result","Objects","Error","links","Links","Array","isArray","length","map","Type"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { createStat } from './files/stat.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createLs = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await createStat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}