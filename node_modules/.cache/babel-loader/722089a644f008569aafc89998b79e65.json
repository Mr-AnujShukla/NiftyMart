{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { modeToString } from '../lib/mode-to-string.js';\nimport { parseMtime } from '../lib/parse-mtime.js';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport var createWrite = configure(function (api) {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  function write(_x, _x2) {\n    return _write.apply(this, arguments);\n  }\n  function _write() {\n    _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, input) {\n      var options,\n        controller,\n        signal,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                signal: signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: path,\n                  streamChannels: true,\n                  count: options.length\n                }, options))\n              };\n              _context.next = 8;\n              return multipartRequest([{\n                content: input,\n                path: 'arg',\n                mode: modeToString(options.mode),\n                mtime: parseMtime(options.mtime)\n              }], controller, options.headers);\n            case 8:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 12;\n              return _context.t0.post.call(_context.t0, 'files/write', _context.t4);\n            case 12:\n              res = _context.sent;\n              _context.next = 15;\n              return res.text();\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _write.apply(this, arguments);\n  }\n  return write;\n});","map":{"version":3,"names":["modeToString","parseMtime","configure","multipartRequest","toUrlSearchParams","abortSignal","createWrite","api","write","path","input","options","controller","AbortController","signal","searchParams","arg","streamChannels","count","length","content","mode","mtime","headers","post","res","text"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/files/write.js"],"sourcesContent":["import { modeToString } from '../lib/mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createWrite = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return write\n})\n"],"mappings":";;;AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,wBAAwB;;AAEpD;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,WAAW,GAAGJ,SAAS,CAAC,UAAAK,GAAG,EAAI;EAC1C;AACF;AACA;EAFE,SAGeC,KAAK;IAAA;EAAA;EAAA;IAAA,oEAApB,iBAAsBC,IAAI,EAAEC,KAAK;MAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cAC7C;cACMC,UAAU,GAAG,IAAIC,eAAe,EAAE;cAClCC,MAAM,GAAGT,WAAW,CAACO,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC;cAAA,cAE3CP,GAAG;cAAA;cAAA;gBACnBO,MAAM,EAANA,MAAM;gBACNC,YAAY,EAAEX,iBAAiB;kBAC7BY,GAAG,EAAEP,IAAI;kBACTQ,cAAc,EAAE,IAAI;kBACpBC,KAAK,EAAEP,OAAO,CAACQ;gBAAM,GAClBR,OAAO;cACV;cAAA;cAAA,OAEMR,gBAAgB,CAAC,CAAC;gBACtBiB,OAAO,EAAEV,KAAK;gBACdD,IAAI,EAAE,KAAK;gBACXY,IAAI,EAAErB,YAAY,CAACW,OAAO,CAACU,IAAI,CAAC;gBAChCC,KAAK,EAAErB,UAAU,CAACU,OAAO,CAACW,KAAK;cACjC,CAAC,CAAC,EAAEV,UAAU,EAAED,OAAO,CAACY,OAAO,CAAC;YAAA;cAAA;cAAA;cAAA;cAAA,mBAddC,IAAI,mBAAC,aAAa;YAAA;cAAlCC,GAAG;cAAA;cAAA,OAkBHA,GAAG,CAACC,IAAI,EAAE;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACjB;IAAA;EAAA;EACD,OAAOlB,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"module"}