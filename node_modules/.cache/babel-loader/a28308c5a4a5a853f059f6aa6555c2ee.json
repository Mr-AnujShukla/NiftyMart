{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CID } from 'multiformats/cid';\nimport { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { createLocal } from './local.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport var createRefs = configure(function (api, opts) {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  var refs = /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(args) {\n      var options,\n        argsArr,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n              argsArr = Array.isArray(args) ? args : [args];\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('refs', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: argsArr.map(function (arg) {\n                    return \"\".concat(arg instanceof Uint8Array ? CID.decode(arg) : arg);\n                  })\n                }, options)),\n                headers: options.headers,\n                transform: objectToCamel\n              }));\n            case 4:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator), \"t0\", 6);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function refs(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return Object.assign(refs, {\n    local: createLocal(opts)\n  });\n});","map":{"version":3,"names":["CID","objectToCamel","configure","toUrlSearchParams","createLocal","createRefs","api","opts","refs","args","options","argsArr","Array","isArray","post","signal","searchParams","arg","map","Uint8Array","decode","headers","transform","res","ndjson","Object","assign","local"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/refs/index.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { createLocal } from './local.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createRefs = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: createLocal(opts)\n  })\n})\n"],"mappings":";;;;;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,YAAY;;AAExC;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,UAAU,GAAGH,SAAS,CAAC,UAACI,GAAG,EAAEC,IAAI,EAAK;EACjD;AACF;AACA;EACE,IAAMC,IAAI;IAAA,wEAAG,iBAAkBC,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cAC/C;cACMC,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;cAAA;cAAA,4BAEjCH,GAAG,CAACQ,IAAI,CAAC,MAAM,EAAE;gBACjCC,MAAM,EAAEL,OAAO,CAACK,MAAM;gBACtBC,YAAY,EAAEb,iBAAiB;kBAC7Bc,GAAG,EAAEN,OAAO,CAACO,GAAG,CAAC,UAAAD,GAAG;oBAAA,iBAAOA,GAAG,YAAYE,UAAU,GAAGnB,GAAG,CAACoB,MAAM,CAACH,GAAG,CAAC,GAAGA,GAAG;kBAAA,CAAE;gBAAC,GAC5EP,OAAO,EACV;gBACFW,OAAO,EAAEX,OAAO,CAACW,OAAO;gBACxBC,SAAS,EAAErB;cACb,CAAC,CAAC;YAAA;cARIsB,GAAG;cAUT,qEAAQA,GAAG,CAACC,MAAM,EAAE;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACrB;IAAA,gBAfKhB,IAAI;MAAA;IAAA;EAAA,GAeT;EAED,OAAOiB,MAAM,CAACC,MAAM,CAAClB,IAAI,EAAE;IACzBmB,KAAK,EAAEvB,WAAW,CAACG,IAAI;EACzB,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}