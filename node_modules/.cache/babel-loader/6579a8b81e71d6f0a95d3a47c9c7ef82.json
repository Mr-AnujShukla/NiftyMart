{"ast":null,"code":"import _classCallCheck from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as Digest from './digest.js';\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport var from = function from(_ref) {\n  var name = _ref.name,\n    code = _ref.code,\n    encode = _ref.encode;\n  return new Hasher(name, code, encode);\n};\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport var Hasher = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  function Hasher(name, code, encode) {\n    _classCallCheck(this, Hasher);\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  _createClass(Hasher, [{\n    key: \"digest\",\n    value: function digest(input) {\n      var _this = this;\n      if (input instanceof Uint8Array) {\n        var result = this.encode(input);\n        return result instanceof Uint8Array ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */ : result.then(function (digest) {\n          return Digest.create(_this.code, digest);\n        });\n      } else {\n        throw Error('Unknown type, must be binary type');\n        /* c8 ignore next 1 */\n      }\n    }\n  }]);\n  return Hasher;\n}();\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */","map":{"version":3,"names":["Digest","from","name","code","encode","Hasher","input","Uint8Array","result","create","then","digest","Error"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/multiformats/src/hashes/hasher.js"],"sourcesContent":["import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n"],"mappings":";;AAAA,OAAO,KAAKA,MAAM,MAAM,aAAa;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAI;EAAA,IAAMC,IAAI,QAAJA,IAAI;IAAEC,IAAI,QAAJA,IAAI;IAAEC,MAAM,QAANA,MAAM;EAAA,OAAO,IAAIC,MAAM,CAACH,IAAI,EAAEC,IAAI,EAAEC,MAAM,CAAC;AAAA;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,MAAM;EACjB;AACF;AACA;AACA;AACA;AACA;EACE,gBAAaH,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAE;IAAA;IAC/B,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;;EAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,OAIA,gBAAQE,KAAK,EAAE;MAAA;MACb,IAAIA,KAAK,YAAYC,UAAU,EAAE;QAC/B,IAAMC,MAAM,GAAG,IAAI,CAACJ,MAAM,CAACE,KAAK,CAAC;QACjC,OAAOE,MAAM,YAAYD,UAAU,GAC/BP,MAAM,CAACS,MAAM,CAAC,IAAI,CAACN,IAAI,EAAEK,MAAM;QACjC,yBACEA,MAAM,CAACE,IAAI,CAAC,UAAAC,MAAM;UAAA,OAAIX,MAAM,CAACS,MAAM,CAAC,KAAI,CAACN,IAAI,EAAEQ,MAAM,CAAC;QAAA,EAAC;MAC7D,CAAC,MAAM;QACL,MAAMC,KAAK,CAAC,mCAAmC,CAAC;QAChD;MACF;IACF;EAAC;EAAA;AAAA;;AAGH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}