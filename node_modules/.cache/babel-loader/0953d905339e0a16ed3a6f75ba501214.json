{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nvar inspect = Symbol.for('nodejs.util.inspect.custom');\nvar DNS_CODES = [getProtocol('dns').code, getProtocol('dns4').code, getProtocol('dns6').code, getProtocol('dnsaddr').code];\nvar P2P_CODES = [getProtocol('p2p').code, getProtocol('ipfs').code];\nexport var resolvers = new Map();\nvar symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n  if (addr == null) {\n    throw new Error('requires node address object');\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol');\n  }\n  var ip;\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4';\n      break;\n    case 6:\n      ip = 'ip6';\n      break;\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.');\n  }\n  return new DefaultMultiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a Multiaddr that is a name\n */\nexport function isName(addr) {\n  if (!isMultiaddr(addr)) {\n    return false;\n  }\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some(function (proto) {\n    return proto.resolvable;\n  });\n}\n/**\n * Check if object is a CID instance\n */\nexport function isMultiaddr(value) {\n  return Boolean(value === null || value === void 0 ? void 0 : value[symbol]);\n}\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nvar DefaultMultiaddr = /*#__PURE__*/function (_ref) {\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  function DefaultMultiaddr(addr) {\n    _classCallCheck(this, DefaultMultiaddr);\n    _DefaultMultiaddr_string.set(this, void 0);\n    _DefaultMultiaddr_tuples.set(this, void 0);\n    _DefaultMultiaddr_stringTuples.set(this, void 0);\n    this[_a] = true;\n    // default\n    if (addr == null) {\n      addr = '';\n    }\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(\"multiaddr \\\"\".concat(addr, \"\\\" must start with a \\\"/\\\"\"));\n      }\n      this.bytes = codec.fromString(addr);\n    } else if (isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n  _createClass(DefaultMultiaddr, [{\n    key: \"toString\",\n    value: function toString() {\n      if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n        __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n      }\n      return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toOptions\",\n    value: function toOptions() {\n      var codes = this.protoCodes();\n      var parts = this.toString().split('/').slice(1);\n      var transport;\n      var port;\n      if (parts.length > 2) {\n        // default to https when protocol & port are omitted from DNS addrs\n        if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n          transport = getProtocol('tcp').name;\n          port = 443;\n        } else {\n          transport = getProtocol(parts[2]).name;\n          port = parseInt(parts[3]);\n        }\n      } else if (DNS_CODES.includes(codes[0])) {\n        transport = getProtocol('tcp').name;\n        port = 443;\n      } else {\n        throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n      }\n      var opts = {\n        family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n        host: parts[1],\n        transport: transport,\n        port: port\n      };\n      return opts;\n    }\n  }, {\n    key: \"protos\",\n    value: function protos() {\n      return this.protoCodes().map(function (code) {\n        return Object.assign({}, getProtocol(code));\n      });\n    }\n  }, {\n    key: \"protoCodes\",\n    value: function protoCodes() {\n      var codes = [];\n      var buf = this.bytes;\n      var i = 0;\n      while (i < buf.length) {\n        var code = varint.decode(buf, i);\n        var n = varint.decode.bytes;\n        var p = getProtocol(code);\n        var size = codec.sizeForAddr(p, buf.slice(i + n));\n        i += size + n;\n        codes.push(code);\n      }\n      return codes;\n    }\n  }, {\n    key: \"protoNames\",\n    value: function protoNames() {\n      return this.protos().map(function (proto) {\n        return proto.name;\n      });\n    }\n  }, {\n    key: \"tuples\",\n    value: function tuples() {\n      if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n        __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n      }\n      return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n    }\n  }, {\n    key: \"stringTuples\",\n    value: function stringTuples() {\n      if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n        __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n      }\n      return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n    }\n  }, {\n    key: \"encapsulate\",\n    value: function encapsulate(addr) {\n      addr = new DefaultMultiaddr(addr);\n      return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n  }, {\n    key: \"decapsulate\",\n    value: function decapsulate(addr) {\n      var addrString = addr.toString();\n      var s = this.toString();\n      var i = s.lastIndexOf(addrString);\n      if (i < 0) {\n        throw new Error(\"Address \".concat(this.toString(), \" does not contain subaddress: \").concat(addr.toString()));\n      }\n      return new DefaultMultiaddr(s.slice(0, i));\n    }\n  }, {\n    key: \"decapsulateCode\",\n    value: function decapsulateCode(code) {\n      var tuples = this.tuples();\n      for (var i = tuples.length - 1; i >= 0; i--) {\n        if (tuples[i][0] === code) {\n          return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"getPeerId\",\n    value: function getPeerId() {\n      try {\n        var tuples = this.stringTuples().filter(function (tuple) {\n          if (tuple[0] === names.ipfs.code) {\n            return true;\n          }\n          return false;\n        });\n        // Get the last ipfs tuple ['ipfs', 'peerid string']\n        var tuple = tuples.pop();\n        if ((tuple === null || tuple === void 0 ? void 0 : tuple[1]) != null) {\n          var peerIdStr = tuple[1];\n          // peer id is base58btc encoded string but not multibase encoded so add the `z`\n          // prefix so we can validate that it is correctly encoded\n          if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n            return uint8ArrayToString(base58btc.decode(\"z\".concat(peerIdStr)), 'base58btc');\n          }\n          // try to parse peer id as CID\n          return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n        }\n        return null;\n      } catch (e) {\n        return null;\n      }\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      var path = null;\n      try {\n        path = this.stringTuples().filter(function (tuple) {\n          var proto = getProtocol(tuple[0]);\n          if (proto.path === true) {\n            return true;\n          }\n          return false;\n        })[0][1];\n        if (path == null) {\n          path = null;\n        }\n      } catch (_unused) {\n        path = null;\n      }\n      return path;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(addr) {\n      return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n  }, {\n    key: \"resolve\",\n    value: function () {\n      var _resolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var resolvableProto, resolver, addresses;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resolvableProto = this.protos().find(function (p) {\n                  return p.resolvable;\n                }); // Multiaddr is not resolvable?\n                if (!(resolvableProto == null)) {\n                  _context.next = 3;\n                  break;\n                }\n                return _context.abrupt(\"return\", [this]);\n              case 3:\n                resolver = resolvers.get(resolvableProto.name);\n                if (!(resolver == null)) {\n                  _context.next = 6;\n                  break;\n                }\n                throw errCode(new Error(\"no available resolver for \".concat(resolvableProto.name)), 'ERR_NO_AVAILABLE_RESOLVER');\n              case 6:\n                _context.next = 8;\n                return resolver(this, options);\n              case 8:\n                addresses = _context.sent;\n                return _context.abrupt(\"return\", addresses.map(function (a) {\n                  return new DefaultMultiaddr(a);\n                }));\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function resolve(_x) {\n        return _resolve.apply(this, arguments);\n      }\n      return resolve;\n    }()\n  }, {\n    key: \"nodeAddress\",\n    value: function nodeAddress() {\n      var options = this.toOptions();\n      if (options.transport !== 'tcp' && options.transport !== 'udp') {\n        throw new Error(\"multiaddr must have a valid format - no protocol with name: \\\"\".concat(options.transport, \"\\\". Must have a valid transport protocol: \\\"{tcp, udp}\\\"\"));\n      }\n      return {\n        family: options.family,\n        address: options.host,\n        port: options.port\n      };\n    }\n  }, {\n    key: \"isThinWaistAddress\",\n    value: function isThinWaistAddress(addr) {\n      var protos = (addr !== null && addr !== void 0 ? addr : this).protos();\n      if (protos.length !== 2) {\n        return false;\n      }\n      if (protos[0].code !== 4 && protos[0].code !== 41) {\n        return false;\n      }\n      if (protos[1].code !== 6 && protos[1].code !== 273) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string.\n     * For post Node.js v10.0.0.\n     * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n     *\n     * @example\n     * ```js\n     * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n     * ```\n     */\n  }, {\n    key: _ref,\n    value: function value() {\n      return this.inspect();\n    }\n  }, {\n    key: \"inspect\",\n    value: function inspect() {\n      return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n    }\n  }]);\n  return DefaultMultiaddr;\n}((_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect));\n/**\n * Static factory\n *\n * @example\n * ```js\n * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n  return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };","map":{"version":3,"mappings":"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","names":["codec","getProtocol","names","varint","CID","base58btc","errCode","toString","uint8ArrayToString","equals","uint8ArrayEquals","inspect","Symbol","for","DNS_CODES","code","P2P_CODES","resolvers","Map","symbol","fromNodeAddress","addr","transport","Error","ip","family","DefaultMultiaddr","address","port","join","isName","isMultiaddr","protos","some","proto","resolvable","value","Boolean","_DefaultMultiaddr_string","_DefaultMultiaddr_tuples","_DefaultMultiaddr_stringTuples","Uint8Array","bytes","fromBytes","length","charAt","fromString","__classPrivateFieldGet","__classPrivateFieldSet","bytesToString","codes","protoCodes","parts","split","slice","includes","name","parseInt","opts","host","map","Object","assign","buf","i","decode","n","p","size","sizeForAddr","push","bytesToTuples","tuplesToStringTuples","tuples","addrString","s","lastIndexOf","tuplesToBytes","stringTuples","filter","tuple","ipfs","pop","peerIdStr","parse","multihash","e","path","options","resolvableProto","find","resolver","get","addresses","a","toOptions","multiaddr","protocols"],"sources":["C:\\Users\\HP\\Desktop\\my_workspace\\hackathon\\NFT\\Pixelate\\node_modules\\@multiformats\\multiaddr\\src\\index.ts"],"sourcesContent":["import * as codec from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport varint from 'varint'\nimport { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport errCode from 'err-code'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\nconst P2P_CODES = [\n  getProtocol('p2p').code,\n  getProtocol('ipfs').code\n]\n\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: string\n  port: number\n}\n\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\nexport interface Resolver { (addr: Multiaddr, options?: AbortOptions): Promise<string[]> }\n\nexport type Tuple = [number, Uint8Array?]\n\nexport type StringTuple = [number, string?]\n\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\nexport const resolvers = new Map<string, Resolver>()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\nexport interface Multiaddr {\n  bytes: Uint8Array\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString: () => string\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON: () => string\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions: () => MultiaddrObject\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos: () => Protocol[]\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes: () => number[]\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames: () => string[]\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples: () => Tuple[]\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples: () => StringTuple[]\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate: (addr: MultiaddrInput) => Multiaddr\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate: (addr: Multiaddr | string) => Multiaddr\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode: (code: number) => Multiaddr\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId: () => string | null\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath: () => string | null\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals: (addr: { bytes: Uint8Array }) => boolean\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   */\n  resolve: (options?: AbortOptions) => Promise<Multiaddr[]>\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress: () => NodeAddress\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress: (addr?: Multiaddr) => boolean\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  inspect: () => string\n}\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * ```\n */\nexport function fromNodeAddress (addr: NodeAddress, transport: string): Multiaddr {\n  if (addr == null) {\n    throw new Error('requires node address object')\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol')\n  }\n  let ip\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4'\n      break\n    case 6:\n      ip = 'ip6'\n      break\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.')\n  }\n  return new DefaultMultiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\n}\n\n/**\n * Returns if something is a Multiaddr that is a name\n */\nexport function isName (addr: Multiaddr): boolean {\n  if (!isMultiaddr(addr)) {\n    return false\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some((proto) => proto.resolvable)\n}\n\n/**\n * Check if object is a CID instance\n */\nexport function isMultiaddr (value: any): value is Multiaddr {\n  return Boolean(value?.[symbol])\n}\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nclass DefaultMultiaddr implements Multiaddr {\n  public bytes: Uint8Array\n  #string?: string\n  #tuples?: Tuple[]\n  #stringTuples?: StringTuple[]\n\n  [symbol]: boolean = true\n\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  toString () {\n    if (this.#string == null) {\n      this.#string = codec.bytesToString(this.bytes)\n    }\n\n    return this.#string\n  }\n\n  toJSON () {\n    return this.toString()\n  }\n\n  toOptions (): MultiaddrObject {\n    const codes = this.protoCodes()\n    const parts = this.toString().split('/').slice(1)\n    let transport: string\n    let port: number\n\n    if (parts.length > 2) {\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n        transport = getProtocol('tcp').name\n        port = 443\n      } else {\n        transport = getProtocol(parts[2]).name\n        port = parseInt(parts[3])\n      }\n    } else if (DNS_CODES.includes(codes[0])) {\n      transport = getProtocol('tcp').name\n      port = 443\n    } else {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\n      host: parts[1],\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  protos (): Protocol[] {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)))\n  }\n\n  protoCodes (): number[] {\n    const codes: number[] = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes\n\n      const p = getProtocol(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  protoNames (): string[] {\n    return this.protos().map(proto => proto.name)\n  }\n\n  tuples (): Array<[number, Uint8Array?]> {\n    if (this.#tuples == null) {\n      this.#tuples = codec.bytesToTuples(this.bytes)\n    }\n\n    return this.#tuples\n  }\n\n  stringTuples (): Array<[number, string?]> {\n    if (this.#stringTuples == null) {\n      this.#stringTuples = codec.tuplesToStringTuples(this.tuples())\n    }\n\n    return this.#stringTuples\n  }\n\n  encapsulate (addr: MultiaddrInput): Multiaddr {\n    addr = new DefaultMultiaddr(addr)\n    return new DefaultMultiaddr(this.toString() + addr.toString())\n  }\n\n  decapsulate (addr: Multiaddr | string): Multiaddr {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new DefaultMultiaddr(s.slice(0, i))\n  }\n\n  decapsulateCode (code: number): Multiaddr {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  getPeerId (): string | null {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  getPath (): string | null {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = getProtocol(tuple[0])\n        if (proto.path === true) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (path == null) {\n        path = null\n      }\n    } catch {\n      path = null\n    }\n    return path\n  }\n\n  equals (addr: { bytes: Uint8Array }) {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  async resolve (options?: AbortOptions): Promise<Multiaddr[]> {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this, options)\n    return addresses.map((a) => new DefaultMultiaddr(a))\n  }\n\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  isThinWaistAddress (addr?: Multiaddr) {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  [inspect] () {\n    return this.inspect()\n  }\n\n  inspect () {\n    return '<Multiaddr ' +\n      uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n      codec.bytesToString(this.bytes) + '>'\n  }\n}\n\n/**\n * Static factory\n *\n * @example\n * ```js\n * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr (addr?: MultiaddrInput): Multiaddr {\n  return new DefaultMultiaddr(addr)\n}\n\nexport { getProtocol as protocols }\n"]},"metadata":{},"sourceType":"module"}