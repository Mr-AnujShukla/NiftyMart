{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport map from 'it-map';\nimport { isBytes, isBlob, isReadableStream, isFileObject } from './utils.js';\nimport { parseMtime, parseMode } from 'ipfs-unixfs';\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport function normaliseCandidateMultiple(_x, _x2) {\n  return _normaliseCandidateMultiple.apply(this, arguments);\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nfunction _normaliseCandidateMultiple() {\n  _normaliseCandidateMultiple = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input, normaliseContent) {\n    var peekable, _yield$_awaitAsyncGen, value, done;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState)) {\n              _context.next = 2;\n              break;\n            }\n            throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n          case 2:\n            // Browser ReadableStream\n            if (isReadableStream(input)) {\n              input = browserStreamToIt(input);\n            }\n\n            // Iterable<?>\n            if (!(Symbol.iterator in input || Symbol.asyncIterator in input)) {\n              _context.next = 26;\n              break;\n            }\n            peekable = itPeekable(input);\n            _context.next = 7;\n            return _awaitAsyncGenerator(peekable.peek());\n          case 7:\n            _yield$_awaitAsyncGen = _context.sent;\n            value = _yield$_awaitAsyncGen.value;\n            done = _yield$_awaitAsyncGen.done;\n            if (!done) {\n              _context.next = 13;\n              break;\n            }\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator([]), _awaitAsyncGenerator), \"t0\", 12);\n          case 12:\n            return _context.abrupt(\"return\");\n          case 13:\n            peekable.push(value);\n\n            // (Async)Iterable<Number>\n            // (Async)Iterable<Bytes>\n            if (!Number.isInteger(value)) {\n              _context.next = 16;\n              break;\n            }\n            throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n          case 16:\n            if (!value._readableState) {\n              _context.next = 19;\n              break;\n            }\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(peekable, function ( /** @type {ImportCandidate} */value) {\n              return toFileObject({\n                content: value\n              }, normaliseContent);\n            })), _awaitAsyncGenerator), \"t1\", 18);\n          case 18:\n            return _context.abrupt(\"return\");\n          case 19:\n            if (!isBytes(value)) {\n              _context.next = 23;\n              break;\n            }\n            _context.next = 22;\n            return toFileObject({\n              content: peekable\n            }, normaliseContent);\n          case 22:\n            return _context.abrupt(\"return\");\n          case 23:\n            if (!(isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value))) {\n              _context.next = 26;\n              break;\n            }\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(peekable, function ( /** @type {ImportCandidate} */value) {\n              return toFileObject(value, normaliseContent);\n            })), _awaitAsyncGenerator), \"t2\", 25);\n          case 25:\n            return _context.abrupt(\"return\");\n          case 26:\n            if (!isFileObject(input)) {\n              _context.next = 28;\n              break;\n            }\n            throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n          case 28:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _normaliseCandidateMultiple.apply(this, arguments);\n}\nfunction toFileObject(_x3, _x4) {\n  return _toFileObject.apply(this, arguments);\n}\nfunction _toFileObject() {\n  _toFileObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(input, normaliseContent) {\n    var path, mode, mtime, content, file;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // @ts-expect-error - Those properties don't exist on most input types\n            path = input.path, mode = input.mode, mtime = input.mtime, content = input.content;\n            /** @type {ImporterImportCandidate} */\n            file = {\n              path: path || '',\n              mode: parseMode(mode),\n              mtime: parseMtime(mtime)\n            };\n            if (!content) {\n              _context2.next = 8;\n              break;\n            }\n            _context2.next = 5;\n            return normaliseContent(content);\n          case 5:\n            file.content = _context2.sent;\n            _context2.next = 12;\n            break;\n          case 8:\n            if (path) {\n              _context2.next = 12;\n              break;\n            }\n            _context2.next = 11;\n            return normaliseContent(input);\n          case 11:\n            file.content = _context2.sent;\n          case 12:\n            return _context2.abrupt(\"return\", file);\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _toFileObject.apply(this, arguments);\n}","map":{"version":3,"names":["errCode","browserStreamToIt","itPeekable","map","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateMultiple","input","normaliseContent","String","_readableState","Error","Symbol","iterator","asyncIterator","peekable","peek","value","done","push","Number","isInteger","toFileObject","content","path","mode","mtime","file"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-core-utils/src/files/normalise-candidate-multiple.js"],"sourcesContent":["import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateMultiple (input, normaliseContent) {\n  // String\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  // fs.ReadStream\n  // @ts-expect-error _readableState is a property of a node fs.ReadStream\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n    }\n\n    // (Async)Iterable<fs.ReadStream>\n    // @ts-expect-error private field\n    if (value._readableState) {\n      // @ts-expect-error Node fs.ReadStreams have a `.path` property so we need to pass it as the content\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject({ content: value }, normaliseContent))\n      return\n    }\n\n    if (isBytes(value)) {\n      // @ts-expect-error peekable is still an iterable of ImportCandidates\n      yield toFileObject({ content: peekable }, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}