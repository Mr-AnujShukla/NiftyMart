{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport var createResolve = configure(function (api) {\n  /**\n   * @type {DAGAPI[\"resolve\"]}\n   */\n  var resolve = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ipfsPath) {\n      var options,\n        res,\n        data,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('dag/resolve', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(ipfsPath).concat(options.path ? \"/\".concat(options.path).replace(/\\/[/]+/g, '/') : '')\n                }, options)),\n                headers: options.headers\n              });\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n            case 6:\n              data = _context.sent;\n              return _context.abrupt(\"return\", {\n                cid: CID.parse(data.Cid['/']),\n                remainderPath: data.RemPath\n              });\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function resolve(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return resolve;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createResolve","api","resolve","ipfsPath","options","post","signal","searchParams","arg","path","replace","headers","res","json","data","cid","parse","Cid","remainderPath","RemPath"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/dag/resolve.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {DAGAPI[\"resolve\"]}\n   */\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Cid['/']), remainderPath: data.RemPath }\n  }\n\n  return resolve\n})\n"],"mappings":";;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,aAAa,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;EAC5C;AACF;AACA;EACE,IAAMC,OAAO;IAAA,sEAAG,iBAAOC,QAAQ;MAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cAAA;cAAA,OACzBH,GAAG,CAACI,IAAI,CAAC,aAAa,EAAE;gBACxCC,MAAM,EAAEF,OAAO,CAACE,MAAM;gBACtBC,YAAY,EAAER,iBAAiB;kBAC7BS,GAAG,YAAKL,QAAQ,SAAGC,OAAO,CAACK,IAAI,GAAG,WAAIL,OAAO,CAACK,IAAI,EAAGC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE;gBAAE,GAChFN,OAAO,EACV;gBACFO,OAAO,EAAEP,OAAO,CAACO;cACnB,CAAC,CAAC;YAAA;cAPIC,GAAG;cAAA;cAAA,OASUA,GAAG,CAACC,IAAI,EAAE;YAAA;cAAvBC,IAAI;cAAA,iCAEH;gBAAEC,GAAG,EAAElB,GAAG,CAACmB,KAAK,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,CAAC,CAAC;gBAAEC,aAAa,EAAEJ,IAAI,CAACK;cAAQ,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACtE;IAAA,gBAbKjB,OAAO;MAAA;IAAA;EAAA,GAaZ;EAED,OAAOA,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}