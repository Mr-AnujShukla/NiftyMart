{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CID } from 'multiformats/cid';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../../lib/configure.js';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nimport { abortSignal } from '../../lib/abort-signal.js';\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport var createAppendData = configure(function (api) {\n  /**\n   * @type {ObjectPatchAPI[\"appendData\"]}\n   */\n  function appendData(_x, _x2) {\n    return _appendData.apply(this, arguments);\n  }\n  function _appendData() {\n    _appendData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid, data) {\n      var options,\n        controller,\n        signal,\n        res,\n        _yield$res$json,\n        Hash,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                signal: signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(cid)\n                }, options))\n              };\n              _context.next = 8;\n              return multipartRequest([data], controller, options.headers);\n            case 8:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 12;\n              return _context.t0.post.call(_context.t0, 'object/patch/append-data', _context.t4);\n            case 12:\n              res = _context.sent;\n              _context.next = 15;\n              return res.json();\n            case 15:\n              _yield$res$json = _context.sent;\n              Hash = _yield$res$json.Hash;\n              return _context.abrupt(\"return\", CID.parse(Hash));\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _appendData.apply(this, arguments);\n  }\n  return appendData;\n});","map":{"version":3,"names":["CID","multipartRequest","configure","toUrlSearchParams","abortSignal","createAppendData","api","appendData","cid","data","options","controller","AbortController","signal","searchParams","arg","headers","post","res","json","Hash","parse"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/object/patch/append-data.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createAppendData = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/append-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return appendData\n})\n"],"mappings":";;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,WAAW,QAAQ,2BAA2B;;AAEvD;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,gBAAgB,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAC/C;AACF;AACA;EAFE,SAGeC,UAAU;IAAA;EAAA;EAAA;IAAA,yEAAzB,iBAA2BC,GAAG,EAAEC,IAAI;MAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cAChD;cACMC,UAAU,GAAG,IAAIC,eAAe,EAAE;cAClCC,MAAM,GAAGT,WAAW,CAACO,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC;cAAA,cAE3CP,GAAG;cAAA;cAAA;gBACnBO,MAAM,EAANA,MAAM;gBACNC,YAAY,EAAEX,iBAAiB;kBAC7BY,GAAG,YAAKP,GAAG;gBAAE,GACVE,OAAO;cACV;cAAA;cAAA,OAEMT,gBAAgB,CAAC,CAACQ,IAAI,CAAC,EAAEE,UAAU,EAAED,OAAO,CAACM,OAAO,CAAC;YAAA;cAAA;cAAA;cAAA;cAAA,mBAPzCC,IAAI,mBAAC,0BAA0B;YAAA;cAA/CC,GAAG;cAAA;cAAA,OAWcA,GAAG,CAACC,IAAI,EAAE;YAAA;cAAA;cAAzBC,IAAI,mBAAJA,IAAI;cAAA,iCAELpB,GAAG,CAACqB,KAAK,CAACD,IAAI,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACvB;IAAA;EAAA;EACD,OAAOb,UAAU;AACnB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}