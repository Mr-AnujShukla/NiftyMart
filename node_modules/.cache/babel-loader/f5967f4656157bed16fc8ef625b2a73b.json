{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { allocUnsafe } from './alloc.js';\nimport { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n */\nexport function concat(arrays, length) {\n  if (length == null) {\n    length = arrays.reduce(function (acc, curr) {\n      return acc + curr.length;\n    }, 0);\n  }\n  var output = allocUnsafe(length);\n  var offset = 0;\n  var _iterator = _createForOfIteratorHelper(arrays),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var arr = _step.value;\n      output.set(arr, offset);\n      offset += arr.length;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return asUint8Array(output);\n}","map":{"version":3,"mappings":";AAAA,SAASA,WAAW,QAAQ,YAAY;AACxC,SAASC,YAAY,QAAQ,yBAAyB;AAEtD;;;AAGA,OAAM,SAAUC,MAAM,CAAEC,MAAgC,EAAEC,MAAe;EACvE,IAAIA,MAAM,IAAI,IAAI,EAAE;IAClBA,MAAM,GAAGD,MAAM,CAACE,MAAM,CAAC,UAACC,GAAG,EAAEC,IAAI;MAAA,OAAKD,GAAG,GAAGC,IAAI,CAACH,MAAM;IAAA,GAAE,CAAC,CAAC;;EAG7D,IAAMI,MAAM,GAAGR,WAAW,CAACI,MAAM,CAAC;EAClC,IAAIK,MAAM,GAAG,CAAC;EAAA,2CAEIN,MAAM;IAAA;EAAA;IAAxB,oDAA0B;MAAA,IAAfO,GAAG;MACZF,MAAM,CAACG,GAAG,CAACD,GAAG,EAAED,MAAM,CAAC;MACvBA,MAAM,IAAIC,GAAG,CAACN,MAAM;;EACrB;IAAA;EAAA;IAAA;EAAA;EAED,OAAOH,YAAY,CAACO,MAAM,CAAC;AAC7B","names":["allocUnsafe","asUint8Array","concat","arrays","length","reduce","acc","curr","output","offset","arr","set"],"sources":["C:\\Users\\HP\\Desktop\\my_workspace\\hackathon\\NFT\\Pixelate\\node_modules\\uint8arrays\\src\\concat.ts"],"sourcesContent":["import { allocUnsafe } from './alloc.js'\nimport { asUint8Array } from './util/as-uint8array.js'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n */\nexport function concat (arrays: Array<ArrayLike<number>>, length?: number): Uint8Array {\n  if (length == null) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = allocUnsafe(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return asUint8Array(output)\n}\n"]},"metadata":{},"sourceType":"module"}