{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport var createRmAll = configure(function (api) {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  function rmAll(_x) {\n    return _rmAll.apply(this, arguments);\n  }\n  function _rmAll() {\n    _rmAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n      var options,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _step$value,\n        path,\n        recursive,\n        searchParams,\n        res,\n        _iteratorAbruptCompletion2,\n        _didIteratorError2,\n        _iteratorError2,\n        _iterator2,\n        _step2,\n        pin,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(normaliseInput(source));\n            case 5:\n              _context.next = 7;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 7:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 50;\n                break;\n              }\n              _step$value = _step.value, path = _step$value.path, recursive = _step$value.recursive;\n              searchParams = new URLSearchParams(options.searchParams);\n              searchParams.append('arg', \"\".concat(path));\n              if (recursive != null) searchParams.set('recursive', String(recursive));\n              _context.next = 14;\n              return _awaitAsyncGenerator(api.post('pin/rm', {\n                signal: options.signal,\n                headers: options.headers,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  arg: \"\".concat(path),\n                  recursive: recursive\n                }))\n              }));\n            case 14:\n              res = _context.sent;\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context.prev = 17;\n              _iterator2 = _asyncIterator(res.ndjson());\n            case 19:\n              _context.next = 21;\n              return _awaitAsyncGenerator(_iterator2.next());\n            case 21:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n                _context.next = 31;\n                break;\n              }\n              pin = _step2.value;\n              if (!pin.Pins) {\n                _context.next = 26;\n                break;\n              }\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pin.Pins.map(function ( /** @type {string} */cid) {\n                return CID.parse(cid);\n              })), _awaitAsyncGenerator), \"t0\", 25);\n            case 25:\n              return _context.abrupt(\"continue\", 28);\n            case 26:\n              _context.next = 28;\n              return CID.parse(pin);\n            case 28:\n              _iteratorAbruptCompletion2 = false;\n              _context.next = 19;\n              break;\n            case 31:\n              _context.next = 37;\n              break;\n            case 33:\n              _context.prev = 33;\n              _context.t1 = _context[\"catch\"](17);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t1;\n            case 37:\n              _context.prev = 37;\n              _context.prev = 38;\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context.next = 42;\n                break;\n              }\n              _context.next = 42;\n              return _awaitAsyncGenerator(_iterator2.return());\n            case 42:\n              _context.prev = 42;\n              if (!_didIteratorError2) {\n                _context.next = 45;\n                break;\n              }\n              throw _iteratorError2;\n            case 45:\n              return _context.finish(42);\n            case 46:\n              return _context.finish(37);\n            case 47:\n              _iteratorAbruptCompletion = false;\n              _context.next = 5;\n              break;\n            case 50:\n              _context.next = 56;\n              break;\n            case 52:\n              _context.prev = 52;\n              _context.t2 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t2;\n            case 56:\n              _context.prev = 56;\n              _context.prev = 57;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 61;\n                break;\n              }\n              _context.next = 61;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 61:\n              _context.prev = 61;\n              if (!_didIteratorError) {\n                _context.next = 64;\n                break;\n              }\n              throw _iteratorError;\n            case 64:\n              return _context.finish(61);\n            case 65:\n              return _context.finish(56);\n            case 66:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 52, 56, 66], [17, 33, 37, 47], [38,, 42, 46], [57,, 61, 65]]);\n    }));\n    return _rmAll.apply(this, arguments);\n  }\n  return rmAll;\n});","map":{"version":3,"names":["CID","configure","normaliseInput","toUrlSearchParams","createRmAll","api","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","post","signal","headers","arg","res","ndjson","pin","Pins","map","cid","parse"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/pin/rm-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createRmAll = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n"],"mappings":";;;;;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,cAAc,QAAQ,sCAAsC;AACrE,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,WAAW,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAC1C;AACF;AACA;EAFE,SAGiBC,KAAK;IAAA;EAAA;EAAA;IAAA,sEAAtB,iBAAwBC,MAAM;MAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cAAA;cAAA;cAAA;cAAA,2BACFN,cAAc,CAACK,MAAM,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA,2BAA3CE,IAAI,eAAJA,IAAI,EAAEC,SAAS,eAATA,SAAS;cAC1BC,YAAY,GAAG,IAAIC,eAAe,CAACJ,OAAO,CAACG,YAAY,CAAC;cAC9DA,YAAY,CAACE,MAAM,CAAC,KAAK,YAAKJ,IAAI,EAAG;cAErC,IAAIC,SAAS,IAAI,IAAI,EAAEC,YAAY,CAACG,GAAG,CAAC,WAAW,EAAEC,MAAM,CAACL,SAAS,CAAC,CAAC;cAAA;cAAA,4BAErDL,GAAG,CAACW,IAAI,CAAC,QAAQ,EAAE;gBACnCC,MAAM,EAAET,OAAO,CAACS,MAAM;gBACtBC,OAAO,EAAEV,OAAO,CAACU,OAAO;gBACxBP,YAAY,EAAER,iBAAiB,iCAC1BK,OAAO;kBACVW,GAAG,YAAKV,IAAI,CAAE;kBACdC,SAAS,EAATA;gBAAS;cAEb,CAAC,CAAC;YAAA;cARIU,GAAG;cAAA;cAAA;cAAA;cAAA,4BAUeA,GAAG,CAACC,MAAM,EAAE;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAnBC,GAAG;cAAA,KACdA,GAAG,CAACC,IAAI;gBAAA;gBAAA;cAAA;cACV,qEAAQD,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,WAAC,qBAAsBC,GAAG;gBAAA,OAAKzB,GAAG,CAAC0B,KAAK,CAACD,GAAG,CAAC;cAAA,EAAC;YAAA;cAAA;YAAA;cAAA;cAGrE,OAAMzB,GAAG,CAAC0B,KAAK,CAACJ,GAAG,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAGzB;IAAA;EAAA;EACD,OAAOhB,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"module"}