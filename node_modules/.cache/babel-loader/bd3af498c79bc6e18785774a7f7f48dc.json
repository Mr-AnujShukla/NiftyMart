{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport var createAddrs = configure(function (api) {\n  /**\n   * @type {SwarmAPI[\"addrs\"]}\n   */\n  function addrs() {\n    return _addrs.apply(this, arguments);\n  }\n  function _addrs() {\n    _addrs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        res,\n        _yield$res$json,\n        Addrs,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('swarm/addrs', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers\n              });\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n            case 6:\n              _yield$res$json = _context.sent;\n              Addrs = _yield$res$json.Addrs;\n              return _context.abrupt(\"return\", Object.keys(Addrs).map(function (id) {\n                return {\n                  id: peerIdFromString(id),\n                  addrs: (Addrs[id] || []).map(function (a) {\n                    return multiaddr(a);\n                  })\n                };\n              }));\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _addrs.apply(this, arguments);\n  }\n  return addrs;\n});","map":{"version":3,"names":["multiaddr","configure","toUrlSearchParams","peerIdFromString","createAddrs","api","addrs","options","post","signal","searchParams","headers","res","json","Addrs","Object","keys","map","id","a"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/swarm/addrs.js"],"sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"addrs\"]}\n   */\n  async function addrs (options = {}) {\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Addrs: Record<string, string[]> }} */\n    const { Addrs } = await res.json()\n\n    return Object.keys(Addrs).map(id => ({\n      id: peerIdFromString(id),\n      addrs: (Addrs[id] || []).map(a => multiaddr(a))\n    }))\n  }\n  return addrs\n})\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,gBAAgB,QAAQ,iBAAiB;;AAElD;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,WAAW,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAC1C;AACF;AACA;EAFE,SAGeC,KAAK;IAAA;EAAA;EAAA;IAAA,oEAApB;MAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAsBC,OAAO,2DAAG,CAAC,CAAC;cAAA;cAAA,OACdF,GAAG,CAACG,IAAI,CAAC,aAAa,EAAE;gBACxCC,MAAM,EAAEF,OAAO,CAACE,MAAM;gBACtBC,YAAY,EAAER,iBAAiB,CAACK,OAAO,CAAC;gBACxCI,OAAO,EAAEJ,OAAO,CAACI;cACnB,CAAC,CAAC;YAAA;cAJIC,GAAG;cAAA;cAAA,OAOeA,GAAG,CAACC,IAAI,EAAE;YAAA;cAAA;cAA1BC,KAAK,mBAALA,KAAK;cAAA,iCAENC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,GAAG,CAAC,UAAAC,EAAE;gBAAA,OAAK;kBACnCA,EAAE,EAAEf,gBAAgB,CAACe,EAAE,CAAC;kBACxBZ,KAAK,EAAE,CAACQ,KAAK,CAACI,EAAE,CAAC,IAAI,EAAE,EAAED,GAAG,CAAC,UAAAE,CAAC;oBAAA,OAAInB,SAAS,CAACmB,CAAC,CAAC;kBAAA;gBAChD,CAAC;cAAA,CAAC,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACJ;IAAA;EAAA;EACD,OAAOb,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"module"}