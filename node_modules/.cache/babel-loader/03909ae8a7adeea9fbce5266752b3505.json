{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { configure } from '../lib/configure.js';\nimport { resolve } from '../lib/resolve.js';\nimport first from 'it-first';\nimport last from 'it-last';\nimport errCode from 'err-code';\nimport { createGet as createBlockGet } from '../block/get.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport var createGet = function createGet(codecs, options) {\n  var fn = configure(function (api, opts) {\n    var getBlock = createBlockGet(opts);\n\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n    var get = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n        var options,\n          entry,\n          result,\n          codec,\n          block,\n          node,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                if (!options.path) {\n                  _context.next = 16;\n                  break;\n                }\n                if (!options.localResolve) {\n                  _context.next = 8;\n                  break;\n                }\n                _context.next = 5;\n                return first(resolve(cid, options.path, codecs, getBlock, options));\n              case 5:\n                _context.t0 = _context.sent;\n                _context.next = 11;\n                break;\n              case 8:\n                _context.next = 10;\n                return last(resolve(cid, options.path, codecs, getBlock, options));\n              case 10:\n                _context.t0 = _context.sent;\n              case 11:\n                entry = _context.t0;\n                /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n                result = entry;\n                if (result) {\n                  _context.next = 15;\n                  break;\n                }\n                throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n              case 15:\n                return _context.abrupt(\"return\", result);\n              case 16:\n                _context.next = 18;\n                return codecs.getCodec(cid.code);\n              case 18:\n                codec = _context.sent;\n                _context.next = 21;\n                return getBlock(cid, options);\n              case 21:\n                block = _context.sent;\n                node = codec.decode(block);\n                return _context.abrupt(\"return\", {\n                  value: node,\n                  remainderPath: ''\n                });\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function get(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return get;\n  });\n  return fn(options);\n};","map":{"version":3,"names":["configure","resolve","first","last","errCode","createGet","createBlockGet","codecs","options","fn","api","opts","getBlock","get","cid","path","localResolve","entry","result","Error","getCodec","code","codec","block","node","decode","value","remainderPath"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/dag/get.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { resolve } from '../lib/resolve.js'\nimport first from 'it-first'\nimport last from 'it-last'\nimport errCode from 'err-code'\nimport { createGet as createBlockGet } from '../block/get.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts)\n\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve\n          ? await first(resolve(cid, options.path, codecs, getBlock, options))\n          : await last(resolve(cid, options.path, codecs, getBlock, options))\n        /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n        const result = (entry)\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n        }\n\n        return result\n      }\n\n      const codec = await codecs.getCodec(cid.code)\n      const block = await getBlock(cid, options)\n      const node = codec.decode(block)\n\n      return {\n        value: node,\n        remainderPath: ''\n      }\n    }\n\n    return get\n  })\n\n  return fn(options)\n}\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,SAAS,IAAIC,cAAc,QAAQ,iBAAiB;;AAE7D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,IAAMD,SAAS,GAAG,SAAZA,SAAS,CAAIE,MAAM,EAAEC,OAAO,EAAK;EAC5C,IAAMC,EAAE,GAAGT,SAAS,CAAC,UAACU,GAAG,EAAEC,IAAI,EAAK;IAClC,IAAMC,QAAQ,GAAGN,cAAc,CAACK,IAAI,CAAC;;IAErC;AACJ;AACA;IACI,IAAME,GAAG;MAAA,sEAAG,iBAAOC,GAAG;QAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;QAAA;UAAA;YAAA;cAAA;gBAAEN,OAAO,2DAAG,CAAC,CAAC;gBAAA,KAC9BA,OAAO,CAACO,IAAI;kBAAA;kBAAA;gBAAA;gBAAA,KACAP,OAAO,CAACQ,YAAY;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACxBd,KAAK,CAACD,OAAO,CAACa,GAAG,EAAEN,OAAO,CAACO,IAAI,EAAER,MAAM,EAAEK,QAAQ,EAAEJ,OAAO,CAAC,CAAC;cAAA;gBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA,OAC5DL,IAAI,CAACF,OAAO,CAACa,GAAG,EAAEN,OAAO,CAACO,IAAI,EAAER,MAAM,EAAEK,QAAQ,EAAEJ,OAAO,CAAC,CAAC;cAAA;gBAAA;cAAA;gBAF/DS,KAAK;gBAGX;gBACMC,MAAM,GAAID,KAAK;gBAAA,IAEhBC,MAAM;kBAAA;kBAAA;gBAAA;gBAAA,MACHd,OAAO,CAAC,IAAIe,KAAK,CAAC,WAAW,CAAC,EAAE,eAAe,CAAC;cAAA;gBAAA,iCAGjDD,MAAM;cAAA;gBAAA;gBAAA,OAGKX,MAAM,CAACa,QAAQ,CAACN,GAAG,CAACO,IAAI,CAAC;cAAA;gBAAvCC,KAAK;gBAAA;gBAAA,OACSV,QAAQ,CAACE,GAAG,EAAEN,OAAO,CAAC;cAAA;gBAApCe,KAAK;gBACLC,IAAI,GAAGF,KAAK,CAACG,MAAM,CAACF,KAAK,CAAC;gBAAA,iCAEzB;kBACLG,KAAK,EAAEF,IAAI;kBACXG,aAAa,EAAE;gBACjB,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACF;MAAA,gBAvBKd,GAAG;QAAA;MAAA;IAAA,GAuBR;IAED,OAAOA,GAAG;EACZ,CAAC,CAAC;EAEF,OAAOJ,EAAE,CAACD,OAAO,CAAC;AACpB,CAAC"},"metadata":{},"sourceType":"module"}