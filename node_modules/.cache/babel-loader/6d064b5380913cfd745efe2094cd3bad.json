{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport var createSet = configure(function (api) {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  var set = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, value) {\n      var options,\n        params,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              if (!(typeof key !== 'string')) {\n                _context.next = 3;\n                break;\n              }\n              throw new Error('Invalid key type');\n            case 3:\n              params = _objectSpread(_objectSpread({}, options), encodeParam(key, value));\n              _context.next = 6;\n              return api.post('config', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(params),\n                headers: options.headers\n              });\n            case 6:\n              res = _context.sent;\n              _context.next = 9;\n              return res.text();\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function set(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return set;\n});\n\n/**\n * @param {*} key\n * @param {*} value\n */\nvar encodeParam = function encodeParam(key, value) {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"names":["configure","toUrlSearchParams","createSet","api","set","key","value","options","Error","params","encodeParam","post","signal","searchParams","headers","res","text","arg","toString","bool","JSON","stringify","json"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/config/set.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createSet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n"],"mappings":";;;AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,SAAS,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;EACxC;AACF;AACA;EACE,IAAMC,GAAG;IAAA,sEAAG,iBAAOC,GAAG,EAAEC,KAAK;MAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cAAA,MACrC,OAAOF,GAAG,KAAK,QAAQ;gBAAA;gBAAA;cAAA;cAAA,MACnB,IAAIG,KAAK,CAAC,kBAAkB,CAAC;YAAA;cAG/BC,MAAM,mCACPF,OAAO,GACPG,WAAW,CAACL,GAAG,EAAEC,KAAK,CAAC;cAAA;cAAA,OAGVH,GAAG,CAACQ,IAAI,CAAC,QAAQ,EAAE;gBACnCC,MAAM,EAAEL,OAAO,CAACK,MAAM;gBACtBC,YAAY,EAAEZ,iBAAiB,CAACQ,MAAM,CAAC;gBACvCK,OAAO,EAAEP,OAAO,CAACO;cACnB,CAAC,CAAC;YAAA;cAJIC,GAAG;cAAA;cAAA,OAMHA,GAAG,CAACC,IAAI,EAAE;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACjB;IAAA,gBAjBKZ,GAAG;MAAA;IAAA;EAAA,GAiBR;EAED,OAAOA,GAAG;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,IAAMM,WAAW,GAAG,SAAdA,WAAW,CAAIL,GAAG,EAAEC,KAAK,EAAK;EAClC,QAAQ,OAAOA,KAAK;IAClB,KAAK,SAAS;MACZ,OAAO;QAAEW,GAAG,EAAE,CAACZ,GAAG,EAAEC,KAAK,CAACY,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAK,CAAC;IACrD,KAAK,QAAQ;MACX,OAAO;QAAEF,GAAG,EAAE,CAACZ,GAAG,EAAEC,KAAK;MAAE,CAAC;IAC9B;MACE,OAAO;QAAEW,GAAG,EAAE,CAACZ,GAAG,EAAEe,IAAI,CAACC,SAAS,CAACf,KAAK,CAAC,CAAC;QAAEgB,IAAI,EAAE;MAAK,CAAC;EAAA;AAE9D,CAAC"},"metadata":{},"sourceType":"module"}