{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport var createReplace = configure(function (api) {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  var replace = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(config) {\n      var options,\n        controller,\n        signal,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                signal: signal,\n                searchParams: toUrlSearchParams(options)\n              };\n              _context.next = 8;\n              return multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers);\n            case 8:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 12;\n              return _context.t0.post.call(_context.t0, 'config/replace', _context.t4);\n            case 12:\n              res = _context.sent;\n              _context.next = 15;\n              return res.text();\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function replace(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return replace;\n});","map":{"version":3,"names":["fromString","uint8ArrayFromString","multipartRequest","configure","toUrlSearchParams","abortSignal","createReplace","api","replace","config","options","controller","AbortController","signal","searchParams","JSON","stringify","headers","post","res","text"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/config/replace.js"],"sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createReplace = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n"],"mappings":";;;AAAA,SAASA,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,wBAAwB;;AAEpD;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,aAAa,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAC5C;AACF;AACA;EACE,IAAMC,OAAO;IAAA,sEAAG,iBAAOC,MAAM;MAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cACzC;cACMC,UAAU,GAAG,IAAIC,eAAe,EAAE;cAClCC,MAAM,GAAGR,WAAW,CAACM,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC;cAAA,cAE3CN,GAAG;cAAA;cAAA;gBACnBM,MAAM,EAANA,MAAM;gBACNC,YAAY,EAAEV,iBAAiB,CAACM,OAAO;cAAC;cAAA;cAAA,OAEhCR,gBAAgB,CAAC,CAACD,oBAAoB,CAACc,IAAI,CAACC,SAAS,CAACP,MAAM,CAAC,CAAC,CAAC,EAAEE,UAAU,EAAED,OAAO,CAACO,OAAO,CAAC;YAAA;cAAA;cAAA;cAAA;cAAA,mBAJjFC,IAAI,mBAAC,gBAAgB;YAAA;cAArCC,GAAG;cAAA;cAAA,OAQHA,GAAG,CAACC,IAAI,EAAE;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACjB;IAAA,gBAdKZ,OAAO;MAAA;IAAA;EAAA,GAcZ;EAED,OAAOA,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}