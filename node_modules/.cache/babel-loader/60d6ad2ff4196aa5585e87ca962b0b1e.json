{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nexport var createRm = configure(function (api) {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  function rm(_x) {\n    return _rm.apply(this, arguments);\n  }\n  function _rm() {\n    _rm = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n      var options,\n        res,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        removed,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              if (!Array.isArray(cid)) {\n                cid = [cid];\n              }\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('block/rm', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: cid.map(function (cid) {\n                    return cid.toString();\n                  }),\n                  'stream-channels': true\n                }, options)),\n                headers: options.headers\n              }));\n            case 4:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(res.ndjson());\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 11:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 18;\n                break;\n              }\n              removed = _step.value;\n              _context.next = 15;\n              return toCoreInterface(removed);\n            case 15:\n              _iteratorAbruptCompletion = false;\n              _context.next = 9;\n              break;\n            case 18:\n              _context.next = 24;\n              break;\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 24:\n              _context.prev = 24;\n              _context.prev = 25;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 29;\n                break;\n              }\n              _context.next = 29;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 29:\n              _context.prev = 29;\n              if (!_didIteratorError) {\n                _context.next = 32;\n                break;\n              }\n              throw _iteratorError;\n            case 32:\n              return _context.finish(29);\n            case 33:\n              return _context.finish(24);\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 20, 24, 34], [25,, 29, 33]]);\n    }));\n    return _rm.apply(this, arguments);\n  }\n  return rm;\n});\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface(removed) {\n  /** @type {RmResult} */\n  var out = {\n    cid: CID.parse(removed.Hash)\n  };\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n  return out;\n}","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createRm","api","rm","cid","options","Array","isArray","post","signal","searchParams","arg","map","toString","headers","res","ndjson","removed","toCoreInterface","out","parse","Hash","Error","error"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/block/rm.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n"],"mappings":";;;;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,QAAQ,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;EACvC;AACF;AACA;EAFE,SAGiBC,EAAE;IAAA;EAAA;EAAA;IAAA,mEAAnB,iBAAqBC,GAAG;MAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cACpC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;gBACvBA,GAAG,GAAG,CAACA,GAAG,CAAC;cACb;cAAC;cAAA,4BAEiBF,GAAG,CAACM,IAAI,CAAC,UAAU,EAAE;gBACrCC,MAAM,EAAEJ,OAAO,CAACI,MAAM;gBACtBC,YAAY,EAAEV,iBAAiB;kBAC7BW,GAAG,EAAEP,GAAG,CAACQ,GAAG,CAAC,UAAAR,GAAG;oBAAA,OAAIA,GAAG,CAACS,QAAQ,EAAE;kBAAA,EAAC;kBACnC,iBAAiB,EAAE;gBAAI,GACpBR,OAAO,EACV;gBACFS,OAAO,EAAET,OAAO,CAACS;cACnB,CAAC,CAAC;YAAA;cARIC,GAAG;cAAA;cAAA;cAAA;cAAA,2BAUmBA,GAAG,CAACC,MAAM,EAAE;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAvBC,OAAO;cAAA;cACtB,OAAMC,eAAe,CAACD,OAAO,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAEjC;IAAA;EAAA;EAED,OAAOd,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASe,eAAe,CAAED,OAAO,EAAE;EACjC;EACA,IAAME,GAAG,GAAG;IACVf,GAAG,EAAEN,GAAG,CAACsB,KAAK,CAACH,OAAO,CAACI,IAAI;EAC7B,CAAC;EAED,IAAIJ,OAAO,CAACK,KAAK,EAAE;IACjBH,GAAG,CAACI,KAAK,GAAG,IAAID,KAAK,CAACL,OAAO,CAACK,KAAK,CAAC;EACtC;EAEA,OAAOH,GAAG;AACZ"},"metadata":{},"sourceType":"module"}