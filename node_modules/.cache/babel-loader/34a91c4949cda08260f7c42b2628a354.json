{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport errCode from 'err-code';\nimport itPeekable from 'it-peekable';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport all from 'it-all';\nimport { isBytes, isBlob, isReadableStream } from './utils.js';\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport function normaliseContent(_x) {\n  return _normaliseContent.apply(this, arguments);\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nfunction _normaliseContent() {\n  _normaliseContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n    var peekable, _yield$peekable$peek, value, done;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isBytes(input)) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\", new Blob([input]));\n          case 2:\n            if (!(typeof input === 'string' || input instanceof String)) {\n              _context.next = 4;\n              break;\n            }\n            return _context.abrupt(\"return\", new Blob([input.toString()]));\n          case 4:\n            if (!isBlob(input)) {\n              _context.next = 6;\n              break;\n            }\n            return _context.abrupt(\"return\", input);\n          case 6:\n            // Browser stream\n            if (isReadableStream(input)) {\n              input = browserStreamToIt(input);\n            }\n\n            // (Async)Iterator<?>\n            if (!(Symbol.iterator in input || Symbol.asyncIterator in input)) {\n              _context.next = 28;\n              break;\n            }\n            /** @type {any} peekable */\n            peekable = itPeekable(input);\n            /** @type {any} value **/\n            _context.next = 11;\n            return peekable.peek();\n          case 11:\n            _yield$peekable$peek = _context.sent;\n            value = _yield$peekable$peek.value;\n            done = _yield$peekable$peek.done;\n            if (!done) {\n              _context.next = 16;\n              break;\n            }\n            return _context.abrupt(\"return\", itToBlob(peekable));\n          case 16:\n            peekable.push(value);\n\n            // (Async)Iterable<Number>\n            if (!Number.isInteger(value)) {\n              _context.next = 26;\n              break;\n            }\n            _context.t0 = Blob;\n            _context.t1 = Uint8Array;\n            _context.next = 22;\n            return all(peekable);\n          case 22:\n            _context.t2 = _context.sent;\n            _context.t3 = _context.t1.from.call(_context.t1, _context.t2);\n            _context.t4 = [_context.t3];\n            return _context.abrupt(\"return\", new _context.t0(_context.t4));\n          case 26:\n            if (!(isBytes(value) || typeof value === 'string' || value instanceof String)) {\n              _context.next = 28;\n              break;\n            }\n            return _context.abrupt(\"return\", itToBlob(peekable));\n          case 28:\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _normaliseContent.apply(this, arguments);\n}\nfunction itToBlob(_x2) {\n  return _itToBlob.apply(this, arguments);\n}\nfunction _itToBlob() {\n  _itToBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(stream) {\n    var parts, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            parts = [];\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 3;\n            _iterator = _asyncIterator(stream);\n          case 5:\n            _context2.next = 7;\n            return _iterator.next();\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 13;\n              break;\n            }\n            chunk = _step.value;\n            parts.push(chunk);\n          case 10:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 5;\n            break;\n          case 13:\n            _context2.next = 19;\n            break;\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n          case 19:\n            _context2.prev = 19;\n            _context2.prev = 20;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 24;\n              break;\n            }\n            _context2.next = 24;\n            return _iterator.return();\n          case 24:\n            _context2.prev = 24;\n            if (!_didIteratorError) {\n              _context2.next = 27;\n              break;\n            }\n            throw _iteratorError;\n          case 27:\n            return _context2.finish(24);\n          case 28:\n            return _context2.finish(19);\n          case 29:\n            return _context2.abrupt(\"return\", new Blob(parts));\n          case 30:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 15, 19, 29], [20,, 24, 28]]);\n  }));\n  return _itToBlob.apply(this, arguments);\n}","map":{"version":3,"names":["errCode","itPeekable","browserStreamToIt","all","isBytes","isBlob","isReadableStream","normaliseContent","input","Blob","String","toString","Symbol","iterator","asyncIterator","peekable","peek","value","done","itToBlob","push","Number","isInteger","Uint8Array","from","Error","stream","parts","chunk"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-core-utils/src/files/normalise-content.browser.js"],"sourcesContent":["import errCode from 'err-code'\nimport itPeekable from 'it-peekable'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport all from 'it-all'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js'\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n"],"mappings":";;;AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,GAAG,MAAM,QAAQ;AACxB,SACEC,OAAO,EACPC,MAAM,EACNC,gBAAgB,QACX,YAAY;;AAEnB;AACA;AACA;AACA,gBAAsBC,gBAAgB;EAAA;AAAA;;AAkDtC;AACA;AACA;AAFA;EAAA,+EAlDO,iBAAiCC,KAAK;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,KAEvCJ,OAAO,CAACI,KAAK,CAAC;cAAA;cAAA;YAAA;YAAA,iCACT,IAAIC,IAAI,CAAC,CAACD,KAAK,CAAC,CAAC;UAAA;YAAA,MAItB,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYE,MAAM;cAAA;cAAA;YAAA;YAAA,iCAC/C,IAAID,IAAI,CAAC,CAACD,KAAK,CAACG,QAAQ,EAAE,CAAC,CAAC;UAAA;YAAA,KAIjCN,MAAM,CAACG,KAAK,CAAC;cAAA;cAAA;YAAA;YAAA,iCACRA,KAAK;UAAA;YAGd;YACA,IAAIF,gBAAgB,CAACE,KAAK,CAAC,EAAE;cAC3BA,KAAK,GAAGN,iBAAiB,CAACM,KAAK,CAAC;YAClC;;YAEA;YAAA,MACII,MAAM,CAACC,QAAQ,IAAIL,KAAK,IAAII,MAAM,CAACE,aAAa,IAAIN,KAAK;cAAA;cAAA;YAAA;YAC3D;YACMO,QAAQ,GAAGd,UAAU,CAACO,KAAK,CAAC;YAElC;YAAA;YAAA,OAC8BO,QAAQ,CAACC,IAAI,EAAE;UAAA;YAAA;YAArCC,KAAK,wBAALA,KAAK;YAAEC,IAAI,wBAAJA,IAAI;YAAA,KAEfA,IAAI;cAAA;cAAA;YAAA;YAAA,iCAECC,QAAQ,CAACJ,QAAQ,CAAC;UAAA;YAG3BA,QAAQ,CAACK,IAAI,CAACH,KAAK,CAAC;;YAEpB;YAAA,KACII,MAAM,CAACC,SAAS,CAACL,KAAK,CAAC;cAAA;cAAA;YAAA;YAAA,cACdR,IAAI;YAAA,cAAEc,UAAU;YAAA;YAAA,OAAYpB,GAAG,CAACY,QAAQ,CAAC;UAAA;YAAA;YAAA,0BAAxBS,IAAI;YAAA;YAAA;UAAA;YAAA,MAI9BpB,OAAO,CAACa,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYP,MAAM;cAAA;cAAA;YAAA;YAAA,iCACjES,QAAQ,CAACJ,QAAQ,CAAC;UAAA;YAAA,MAIvBf,OAAO,CAAC,IAAIyB,KAAK,6BAAsBjB,KAAK,EAAG,EAAE,sBAAsB,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC/E;EAAA;AAAA;AAAA,SAKcW,QAAQ;EAAA;AAAA;AAAA;EAAA,uEAAvB,kBAAyBO,MAAM;IAAA;IAAA;MAAA;QAAA;UAAA;YACvBC,KAAK,GAAG,EAAE;YAAA;YAAA;YAAA;YAAA,2BAEUD,MAAM;UAAA;YAAA;YAAA;UAAA;YAAA;cAAA;cAAA;YAAA;YAAfE,KAAK;YACpBD,KAAK,CAACP,IAAI,CAACQ,KAAK,CAAC;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;UAAA;YAAA;UAAA;YAAA,kCAGZ,IAAInB,IAAI,CAACkB,KAAK,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvB;EAAA;AAAA"},"metadata":{},"sourceType":"module"}