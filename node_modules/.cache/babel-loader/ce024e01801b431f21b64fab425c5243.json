{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CID } from 'multiformats/cid';\nimport { objectToCamel } from './lib/object-to-camel.js';\nimport { configure } from './lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { abortSignal } from './lib/abort-signal.js';\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nexport var createAddAll = configure(function (api) {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n      var options,\n        controller,\n        signal,\n        _yield$_awaitAsyncGen,\n        headers,\n        body,\n        total,\n        parts,\n        _ref,\n        _ref2,\n        progressFn,\n        onUploadProgress,\n        res,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        file,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.next = 5;\n              return _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n            case 5:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              total = _yield$_awaitAsyncGen.total;\n              parts = _yield$_awaitAsyncGen.parts;\n              // In browser response body only starts streaming once upload is\n              // complete, at which point all the progress updates are invalid. If\n              // length of the content is computable we can interpret progress from\n              // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n              // in which case we disable progress updates to be written out.\n              _ref = typeof options.progress === 'function' ? createProgressHandler(total, parts, options.progress) : [undefined, undefined], _ref2 = _slicedToArray(_ref, 2), progressFn = _ref2[0], onUploadProgress = _ref2[1];\n              _context.next = 13;\n              return _awaitAsyncGenerator(api.post('add', {\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  'stream-channels': true\n                }, options), {}, {\n                  progress: Boolean(progressFn)\n                })),\n                onUploadProgress: onUploadProgress,\n                signal: signal,\n                headers: headers,\n                body: body\n              }));\n            case 13:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 16;\n              _iterator = _asyncIterator(res.ndjson());\n            case 18:\n              _context.next = 20;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 20:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 32;\n                break;\n              }\n              file = _step.value;\n              file = objectToCamel(file);\n              if (!(file.hash !== undefined)) {\n                _context.next = 28;\n                break;\n              }\n              _context.next = 26;\n              return toCoreInterface(file);\n            case 26:\n              _context.next = 29;\n              break;\n            case 28:\n              if (progressFn) {\n                progressFn(file.bytes || 0, file.name);\n              }\n            case 29:\n              _iteratorAbruptCompletion = false;\n              _context.next = 18;\n              break;\n            case 32:\n              _context.next = 38;\n              break;\n            case 34:\n              _context.prev = 34;\n              _context.t0 = _context[\"catch\"](16);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 38:\n              _context.prev = 38;\n              _context.prev = 39;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 43;\n                break;\n              }\n              _context.next = 43;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 43:\n              _context.prev = 43;\n              if (!_didIteratorError) {\n                _context.next = 46;\n                break;\n              }\n              throw _iteratorError;\n            case 46:\n              return _context.finish(43);\n            case 47:\n              return _context.finish(38);\n            case 48:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[16, 34, 38, 48], [39,, 43, 47]]);\n    }));\n    return _addAll.apply(this, arguments);\n  }\n  return addAll;\n});\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nvar createProgressHandler = function createProgressHandler(total, parts, progress) {\n  return parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n};\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nvar createOnUploadProgress = function createOnUploadProgress(size, parts, progress) {\n  var index = 0;\n  var count = parts.length;\n  return function (_ref3) {\n    var loaded = _ref3.loaded,\n      total = _ref3.total;\n    // Derive position from the current progress.\n    var position = Math.floor(loaded / total * size);\n    while (index < count) {\n      var _parts$index = parts[index],\n        start = _parts$index.start,\n        end = _parts$index.end,\n        name = _parts$index.name;\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name);\n        break;\n        // If passed current part range report final byte for the chunk and\n        // move to next one.\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface(_ref4) {\n  var name = _ref4.name,\n    hash = _ref4.hash,\n    size = _ref4.size,\n    mode = _ref4.mode,\n    mtime = _ref4.mtime,\n    mtimeNsecs = _ref4.mtimeNsecs;\n  /** @type {AddResult} */\n  var output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  };\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n  return output;\n}","map":{"version":3,"names":["CID","objectToCamel","configure","multipartRequest","toUrlSearchParams","abortSignal","createAddAll","api","addAll","source","options","controller","AbortController","signal","headers","body","total","parts","progress","createProgressHandler","undefined","progressFn","onUploadProgress","post","searchParams","Boolean","res","ndjson","file","hash","toCoreInterface","bytes","name","createOnUploadProgress","size","index","count","length","loaded","position","Math","floor","start","end","mode","mtime","mtimeNsecs","output","path","cid","parse","parseInt","secs","nsecs"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/add-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { abortSignal } from './lib/abort-signal.js'\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nexport const createAddAll = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = objectToCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}