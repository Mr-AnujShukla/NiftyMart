{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport var createStat = configure(function (api) {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  function stat() {\n    return _stat.apply(this, arguments);\n  }\n  function _stat() {\n    _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('bitswap/stat', {\n                searchParams: toUrlSearchParams(options),\n                signal: options.signal,\n                headers: options.headers\n              });\n            case 3:\n              res = _context.sent;\n              _context.t0 = toCoreInterface;\n              _context.next = 7;\n              return res.json();\n            case 7:\n              _context.t1 = _context.sent;\n              return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _stat.apply(this, arguments);\n  }\n  return stat;\n});\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface(res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map(function ( /** @type {{ '/': string }} */k) {\n      return CID.parse(k['/']);\n    }),\n    peers: (res.Peers || []).map(function ( /** @type {string} */str) {\n      return peerIdFromString(str);\n    }),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  };\n}","map":{"version":3,"names":["CID","configure","toUrlSearchParams","peerIdFromString","createStat","api","stat","options","post","searchParams","signal","headers","res","toCoreInterface","json","provideBufLen","ProvideBufLen","wantlist","Wantlist","map","k","parse","peers","Peers","str","blocksReceived","BigInt","BlocksReceived","dataReceived","DataReceived","blocksSent","BlocksSent","dataSent","DataSent","dupBlksReceived","DupBlksReceived","dupDataReceived","DupDataReceived"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/bitswap/stat.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/'])),\n    peers: (res.Peers || []).map((/** @type {string} */ str) => peerIdFromString(str)),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  }\n}\n"],"mappings":";;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,gBAAgB,QAAQ,iBAAiB;;AAElD;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,UAAU,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EACzC;AACF;AACA;EAFE,SAGeC,IAAI;IAAA;EAAA;EAAA;IAAA,mEAAnB;MAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAqBC,OAAO,2DAAG,CAAC,CAAC;cAAA;cAAA,OACbF,GAAG,CAACG,IAAI,CAAC,cAAc,EAAE;gBACzCC,YAAY,EAAEP,iBAAiB,CAACK,OAAO,CAAC;gBACxCG,MAAM,EAAEH,OAAO,CAACG,MAAM;gBACtBC,OAAO,EAAEJ,OAAO,CAACI;cACnB,CAAC,CAAC;YAAA;cAJIC,GAAG;cAAA,cAMFC,eAAe;cAAA;cAAA,OAAOD,GAAG,CAACE,IAAI,EAAE;YAAA;cAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACxC;IAAA;EAAA;EACD,OAAOR,IAAI;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASO,eAAe,CAAED,GAAG,EAAE;EAC7B,OAAO;IACLG,aAAa,EAAEH,GAAG,CAACI,aAAa;IAChCC,QAAQ,EAAE,CAACL,GAAG,CAACM,QAAQ,IAAI,EAAE,EAAEC,GAAG,CAAC,WAAC,8BAA+BC,CAAC;MAAA,OAAKpB,GAAG,CAACqB,KAAK,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC;IAAA,EAAC;IAC3FE,KAAK,EAAE,CAACV,GAAG,CAACW,KAAK,IAAI,EAAE,EAAEJ,GAAG,CAAC,WAAC,qBAAsBK,GAAG;MAAA,OAAKrB,gBAAgB,CAACqB,GAAG,CAAC;IAAA,EAAC;IAClFC,cAAc,EAAEC,MAAM,CAACd,GAAG,CAACe,cAAc,CAAC;IAC1CC,YAAY,EAAEF,MAAM,CAACd,GAAG,CAACiB,YAAY,CAAC;IACtCC,UAAU,EAAEJ,MAAM,CAACd,GAAG,CAACmB,UAAU,CAAC;IAClCC,QAAQ,EAAEN,MAAM,CAACd,GAAG,CAACqB,QAAQ,CAAC;IAC9BC,eAAe,EAAER,MAAM,CAACd,GAAG,CAACuB,eAAe,CAAC;IAC5CC,eAAe,EAAEV,MAAM,CAACd,GAAG,CAACyB,eAAe;EAC7C,CAAC;AACH"},"metadata":{},"sourceType":"module"}