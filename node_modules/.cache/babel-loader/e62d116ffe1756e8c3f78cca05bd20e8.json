{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin(type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  var pin = {\n    type: type,\n    cid: CID.parse(cid)\n  };\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n  return pin;\n}\nexport var createLs = configure(function (api) {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  function ls() {\n    return _ls.apply(this, arguments);\n  }\n  function _ls() {\n    _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        paths,\n        res,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        pin,\n        _i,\n        _Object$keys,\n        cid,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              /** @type {any[]} */\n              paths = [];\n              if (options.paths) {\n                paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n              }\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('pin/ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  arg: paths.map(function (path) {\n                    return \"\".concat(path);\n                  }),\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n            case 5:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 8;\n              _iterator = _asyncIterator(res.ndjson());\n            case 10:\n              _context.next = 12;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 12:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 29;\n                break;\n              }\n              pin = _step.value;\n              if (!pin.Keys) {\n                _context.next = 24;\n                break;\n              }\n              _i = 0, _Object$keys = Object.keys(pin.Keys);\n            case 16:\n              if (!(_i < _Object$keys.length)) {\n                _context.next = 23;\n                break;\n              }\n              cid = _Object$keys[_i];\n              _context.next = 20;\n              return toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n            case 20:\n              _i++;\n              _context.next = 16;\n              break;\n            case 23:\n              return _context.abrupt(\"return\");\n            case 24:\n              _context.next = 26;\n              return toPin(pin.Type, pin.Cid, pin.Metadata);\n            case 26:\n              _iteratorAbruptCompletion = false;\n              _context.next = 10;\n              break;\n            case 29:\n              _context.next = 35;\n              break;\n            case 31:\n              _context.prev = 31;\n              _context.t0 = _context[\"catch\"](8);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 35:\n              _context.prev = 35;\n              _context.prev = 36;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 40;\n                break;\n              }\n              _context.next = 40;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 40:\n              _context.prev = 40;\n              if (!_didIteratorError) {\n                _context.next = 43;\n                break;\n              }\n              throw _iteratorError;\n            case 43:\n              return _context.finish(40);\n            case 44:\n              return _context.finish(35);\n            case 45:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 31, 35, 45], [36,, 40, 44]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n  return ls;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","toPin","type","cid","metadata","pin","parse","createLs","api","ls","options","paths","Array","isArray","post","signal","searchParams","arg","map","path","stream","headers","res","ndjson","Keys","Object","keys","Type","Metadata","Cid"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/pin/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nexport const createLs = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n"],"mappings":";;;;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,CAAEC,IAAI,EAAEC,GAAG,EAAEC,QAAQ,EAAE;EACnC;EACA,IAAMC,GAAG,GAAG;IACVH,IAAI,EAAJA,IAAI;IACJC,GAAG,EAAEL,GAAG,CAACQ,KAAK,CAACH,GAAG;EACpB,CAAC;EAED,IAAIC,QAAQ,EAAE;IACZC,GAAG,CAACD,QAAQ,GAAGA,QAAQ;EACzB;EAEA,OAAOC,GAAG;AACZ;AAEA,OAAO,IAAME,QAAQ,GAAGR,SAAS,CAAC,UAAAS,GAAG,EAAI;EACvC;AACF;AACA;EAFE,SAGiBC,EAAE;IAAA;EAAA;EAAA;IAAA,mEAAnB;MAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAqBC,OAAO,2DAAG,CAAC,CAAC;cAC/B;cACIC,KAAK,GAAG,EAAE;cAEd,IAAID,OAAO,CAACC,KAAK,EAAE;gBACjBA,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACH,OAAO,CAACC,KAAK,CAAC,GAAGD,OAAO,CAACC,KAAK,GAAG,CAACD,OAAO,CAACC,KAAK,CAAC;cACxE;cAAC;cAAA,4BAEiBH,GAAG,CAACM,IAAI,CAAC,QAAQ,EAAE;gBACnCC,MAAM,EAAEL,OAAO,CAACK,MAAM;gBACtBC,YAAY,EAAEhB,iBAAiB,iCAC1BU,OAAO;kBACVO,GAAG,EAAEN,KAAK,CAACO,GAAG,CAAC,UAAAC,IAAI;oBAAA,iBAAOA,IAAI;kBAAA,CAAE,CAAC;kBACjCC,MAAM,EAAE;gBAAI,GACZ;gBACFC,OAAO,EAAEX,OAAO,CAACW;cACnB,CAAC,CAAC;YAAA;cARIC,GAAG;cAAA;cAAA;cAAA;cAAA,2BAUeA,GAAG,CAACC,MAAM,EAAE;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAnBlB,GAAG;cAAA,KACdA,GAAG,CAACmB,IAAI;gBAAA;gBAAA;cAAA;cAAA,uBACQC,MAAM,CAACC,IAAI,CAACrB,GAAG,CAACmB,IAAI,CAAC;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAA5BrB,GAAG;cAAA;cACZ,OAAMF,KAAK,CAACI,GAAG,CAACmB,IAAI,CAACrB,GAAG,CAAC,CAACwB,IAAI,EAAExB,GAAG,EAAEE,GAAG,CAACmB,IAAI,CAACrB,GAAG,CAAC,CAACyB,QAAQ,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;cAKhE,OAAM3B,KAAK,CAACI,GAAG,CAACsB,IAAI,EAAEtB,GAAG,CAACwB,GAAG,EAAExB,GAAG,CAACuB,QAAQ,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAE/C;IAAA;EAAA;EACD,OAAOnB,EAAE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"module"}