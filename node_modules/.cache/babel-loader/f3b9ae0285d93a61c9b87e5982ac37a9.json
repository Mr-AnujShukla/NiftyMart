{"ast":null,"code":"import Web3 from 'web3';\nimport { setGlobalState, getGlobalState, setAlert } from './store';\nimport abi from './abis/TimelessNFT.json';\nconst {\n  ethereum\n} = window;\nwindow.web3 = new Web3(ethereum);\nwindow.web3 = new Web3(window.web3.currentProvider);\nconst getEtheriumContract = async () => {\n  const connectedAccount = getGlobalState('connectedAccount');\n  if (connectedAccount) {\n    const web3 = window.web3;\n    const networkId = await web3.eth.net.getId();\n    const networkData = abi.networks[networkId];\n    if (networkData) {\n      const contract = new web3.eth.Contract(abi.abi, networkData.address);\n      return contract;\n    } else {\n      return null;\n    }\n  } else {\n    return getGlobalState('contract');\n  }\n};\nconst connectWallet = async () => {\n  try {\n    if (!ethereum) return alert('Please install Metamask');\n    const accounts = await ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    setGlobalState('connectedAccount', accounts[0].toLowerCase());\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst isWallectConnected = async () => {\n  try {\n    if (!ethereum) return alert('Please install Metamask');\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    window.ethereum.on('chainChanged', chainId => {\n      window.location.reload();\n    });\n    window.ethereum.on('accountsChanged', async () => {\n      setGlobalState('connectedAccount', accounts[0].toLowerCase());\n      await isWallectConnected();\n    });\n    if (accounts.length) {\n      setGlobalState('connectedAccount', accounts[0].toLowerCase());\n    } else {\n      alert('Please connect wallet.');\n      console.log('No accounts found.');\n    }\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst structuredNfts = nfts => {\n  return nfts.map(nft => ({\n    id: Number(nft.id),\n    owner: nft.owner.toLowerCase(),\n    cost: window.web3.utils.fromWei(nft.cost),\n    title: nft.title,\n    description: nft.description,\n    metadataURI: nft.metadataURI,\n    timestamp: nft.timestamp\n  })).reverse();\n};\nconst getAllNFTs = async () => {\n  try {\n    if (!ethereum) return alert('Please install Metamask');\n    const contract = await getEtheriumContract();\n    const nfts = await contract.methods.getAllNFTs().call();\n    const transactions = await contract.methods.getAllTransactions().call();\n    setGlobalState('nfts', structuredNfts(nfts));\n    setGlobalState('transactions', structuredNfts(transactions));\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst mintNFT = async _ref => {\n  let {\n    title,\n    description,\n    metadataURI,\n    price\n  } = _ref;\n  try {\n    price = window.web3.utils.toWei(price.toString(), 'ether');\n    const contract = await getEtheriumContract();\n    const account = getGlobalState('connectedAccount');\n    const mintPrice = window.web3.utils.toWei('0.01', 'ether');\n    await contract.methods.payToMint(title, description, metadataURI, price).send({\n      from: account,\n      value: mintPrice\n    });\n    return true;\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst buyNFT = async _ref2 => {\n  let {\n    id,\n    cost\n  } = _ref2;\n  try {\n    cost = window.web3.utils.toWei(cost.toString(), 'ether');\n    const contract = await getEtheriumContract();\n    const buyer = getGlobalState('connectedAccount');\n    await contract.methods.payToBuy(Number(id)).send({\n      from: buyer,\n      value: cost\n    });\n    return true;\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst updateNFT = async _ref3 => {\n  let {\n    id,\n    cost\n  } = _ref3;\n  try {\n    cost = window.web3.utils.toWei(cost.toString(), 'ether');\n    const contract = await getEtheriumContract();\n    const buyer = getGlobalState('connectedAccount');\n    await contract.methods.changePrice(Number(id), cost).send({\n      from: buyer\n    });\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst reportError = error => {\n  setAlert(JSON.stringify(error), 'red');\n  throw new Error('No ethereum object.');\n};\nexport { getAllNFTs, connectWallet, mintNFT, buyNFT, updateNFT, isWallectConnected };","map":{"version":3,"names":["Web3","setGlobalState","getGlobalState","setAlert","abi","ethereum","window","web3","currentProvider","getEtheriumContract","connectedAccount","networkId","eth","net","getId","networkData","networks","contract","Contract","address","connectWallet","alert","accounts","request","method","toLowerCase","error","reportError","isWallectConnected","on","chainId","location","reload","length","console","log","structuredNfts","nfts","map","nft","id","Number","owner","cost","utils","fromWei","title","description","metadataURI","timestamp","reverse","getAllNFTs","methods","call","transactions","getAllTransactions","mintNFT","price","toWei","toString","account","mintPrice","payToMint","send","from","value","buyNFT","buyer","payToBuy","updateNFT","changePrice","JSON","stringify","Error"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/src/Blockchain.Services.jsx"],"sourcesContent":["import Web3 from 'web3'\r\nimport { setGlobalState, getGlobalState, setAlert } from './store'\r\nimport abi from './abis/TimelessNFT.json'\r\n\r\nconst { ethereum } = window\r\nwindow.web3 = new Web3(ethereum)\r\nwindow.web3 = new Web3(window.web3.currentProvider)\r\n\r\nconst getEtheriumContract = async () => {\r\n  const connectedAccount = getGlobalState('connectedAccount')\r\n\r\n  if (connectedAccount) {\r\n    const web3 = window.web3\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = abi.networks[networkId]\r\n\r\n    if (networkData) {\r\n      const contract = new web3.eth.Contract(abi.abi, networkData.address)\r\n      return contract\r\n    } else {\r\n      return null\r\n    }\r\n  } else {\r\n    return getGlobalState('contract')\r\n  }\r\n}\r\n\r\nconst connectWallet = async () => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n    const accounts = await ethereum.request({ method: 'eth_requestAccounts' })\r\n    setGlobalState('connectedAccount', accounts[0].toLowerCase())\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst isWallectConnected = async () => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n    const accounts = await ethereum.request({ method: 'eth_accounts' })\r\n\r\n    window.ethereum.on('chainChanged', (chainId) => {\r\n      window.location.reload()\r\n    })\r\n\r\n    window.ethereum.on('accountsChanged', async () => {\r\n      setGlobalState('connectedAccount', accounts[0].toLowerCase())\r\n      await isWallectConnected()\r\n    })\r\n\r\n    if (accounts.length) {\r\n      setGlobalState('connectedAccount', accounts[0].toLowerCase())\r\n    } else {\r\n      alert('Please connect wallet.')\r\n      console.log('No accounts found.')\r\n    }\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst structuredNfts = (nfts) => {\r\n  return nfts\r\n    .map((nft) => ({\r\n      id: Number(nft.id),\r\n      owner: nft.owner.toLowerCase(),\r\n      cost: window.web3.utils.fromWei(nft.cost),\r\n      title: nft.title,\r\n      description: nft.description,\r\n      metadataURI: nft.metadataURI,\r\n      timestamp: nft.timestamp,\r\n    }))\r\n    .reverse()\r\n}\r\n\r\nconst getAllNFTs = async () => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n\r\n    const contract = await getEtheriumContract()\r\n    const nfts = await contract.methods.getAllNFTs().call()\r\n    const transactions = await contract.methods.getAllTransactions().call()\r\n\r\n    setGlobalState('nfts', structuredNfts(nfts))\r\n    setGlobalState('transactions', structuredNfts(transactions))\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst mintNFT = async ({ title, description, metadataURI, price }) => {\r\n  try {\r\n    price = window.web3.utils.toWei(price.toString(), 'ether')\r\n    const contract = await getEtheriumContract()\r\n    const account = getGlobalState('connectedAccount')\r\n    const mintPrice = window.web3.utils.toWei('0.01', 'ether')\r\n\r\n    await contract.methods\r\n      .payToMint(title, description, metadataURI, price)\r\n      .send({ from: account, value: mintPrice })\r\n\r\n    return true\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst buyNFT = async ({ id, cost }) => {\r\n  try {\r\n    cost = window.web3.utils.toWei(cost.toString(), 'ether')\r\n    const contract = await getEtheriumContract()\r\n    const buyer = getGlobalState('connectedAccount')\r\n\r\n    await contract.methods\r\n      .payToBuy(Number(id))\r\n      .send({ from: buyer, value: cost })\r\n\r\n    return true\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst updateNFT = async ({ id, cost }) => {\r\n  try {\r\n    cost = window.web3.utils.toWei(cost.toString(), 'ether')\r\n    const contract = await getEtheriumContract()\r\n    const buyer = getGlobalState('connectedAccount')\r\n\r\n    await contract.methods.changePrice(Number(id), cost).send({ from: buyer })\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst reportError = (error) => {\r\n  setAlert(JSON.stringify(error), 'red')\r\n  throw new Error('No ethereum object.')\r\n}\r\n\r\nexport {\r\n  getAllNFTs,\r\n  connectWallet,\r\n  mintNFT,\r\n  buyNFT,\r\n  updateNFT,\r\n  isWallectConnected,\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}