{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nexport function normaliseInput(_x) {\n  return _normaliseInput.apply(this, arguments);\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction _normaliseInput() {\n  _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n    var cid, iterator, first, _iterator3, _step3, _cid, _iterator4, _step4, obj, _iterator5, _first, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _cid2, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _obj;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n          case 2:\n            // CID\n            cid = CID.asCID(input);\n            if (!cid) {\n              _context.next = 7;\n              break;\n            }\n            _context.next = 6;\n            return toPin({\n              cid: cid\n            });\n          case 6:\n            return _context.abrupt(\"return\");\n          case 7:\n            if (!(input instanceof String || typeof input === 'string')) {\n              _context.next = 11;\n              break;\n            }\n            _context.next = 10;\n            return toPin({\n              path: input\n            });\n          case 10:\n            return _context.abrupt(\"return\");\n          case 11:\n            if (!(input.cid != null || input.path != null)) {\n              _context.next = 15;\n              break;\n            }\n            _context.next = 14;\n            return toPin(input);\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n          case 15:\n            if (!(Symbol.iterator in input)) {\n              _context.next = 63;\n              break;\n            }\n            // @ts-expect-error\n            iterator = input[Symbol.iterator]();\n            first = iterator.next();\n            if (!first.done) {\n              _context.next = 20;\n              break;\n            }\n            return _context.abrupt(\"return\", iterator);\n          case 20:\n            if (!(CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string')) {\n              _context.next = 41;\n              break;\n            }\n            _context.next = 23;\n            return toPin({\n              cid: first.value\n            });\n          case 23:\n            _iterator3 = _createForOfIteratorHelper(iterator);\n            _context.prev = 24;\n            _iterator3.s();\n          case 26:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 32;\n              break;\n            }\n            _cid = _step3.value;\n            _context.next = 30;\n            return toPin({\n              cid: _cid\n            });\n          case 30:\n            _context.next = 26;\n            break;\n          case 32:\n            _context.next = 37;\n            break;\n          case 34:\n            _context.prev = 34;\n            _context.t0 = _context[\"catch\"](24);\n            _iterator3.e(_context.t0);\n          case 37:\n            _context.prev = 37;\n            _iterator3.f();\n            return _context.finish(37);\n          case 40:\n            return _context.abrupt(\"return\");\n          case 41:\n            if (!(first.value.cid != null || first.value.path != null)) {\n              _context.next = 62;\n              break;\n            }\n            _context.next = 44;\n            return toPin(first.value);\n          case 44:\n            _iterator4 = _createForOfIteratorHelper(iterator);\n            _context.prev = 45;\n            _iterator4.s();\n          case 47:\n            if ((_step4 = _iterator4.n()).done) {\n              _context.next = 53;\n              break;\n            }\n            obj = _step4.value;\n            _context.next = 51;\n            return toPin(obj);\n          case 51:\n            _context.next = 47;\n            break;\n          case 53:\n            _context.next = 58;\n            break;\n          case 55:\n            _context.prev = 55;\n            _context.t1 = _context[\"catch\"](45);\n            _iterator4.e(_context.t1);\n          case 58:\n            _context.prev = 58;\n            _iterator4.f();\n            return _context.finish(58);\n          case 61:\n            return _context.abrupt(\"return\");\n          case 62:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n          case 63:\n            if (!(Symbol.asyncIterator in input)) {\n              _context.next = 137;\n              break;\n            }\n            // @ts-expect-error\n            _iterator5 = input[Symbol.asyncIterator]();\n            _context.next = 67;\n            return _awaitAsyncGenerator(_iterator5.next());\n          case 67:\n            _first = _context.sent;\n            if (!_first.done) {\n              _context.next = 70;\n              break;\n            }\n            return _context.abrupt(\"return\", _iterator5);\n          case 70:\n            if (!(CID.asCID(_first.value) || _first.value instanceof String || typeof _first.value === 'string')) {\n              _context.next = 103;\n              break;\n            }\n            _context.next = 73;\n            return toPin({\n              cid: _first.value\n            });\n          case 73:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 75;\n            _iterator = _asyncIterator(_iterator5);\n          case 77:\n            _context.next = 79;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 79:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 86;\n              break;\n            }\n            _cid2 = _step.value;\n            _context.next = 83;\n            return toPin({\n              cid: _cid2\n            });\n          case 83:\n            _iteratorAbruptCompletion = false;\n            _context.next = 77;\n            break;\n          case 86:\n            _context.next = 92;\n            break;\n          case 88:\n            _context.prev = 88;\n            _context.t2 = _context[\"catch\"](75);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n          case 92:\n            _context.prev = 92;\n            _context.prev = 93;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 97;\n              break;\n            }\n            _context.next = 97;\n            return _awaitAsyncGenerator(_iterator.return());\n          case 97:\n            _context.prev = 97;\n            if (!_didIteratorError) {\n              _context.next = 100;\n              break;\n            }\n            throw _iteratorError;\n          case 100:\n            return _context.finish(97);\n          case 101:\n            return _context.finish(92);\n          case 102:\n            return _context.abrupt(\"return\");\n          case 103:\n            if (!(_first.value.cid != null || _first.value.path != null)) {\n              _context.next = 136;\n              break;\n            }\n            _context.next = 106;\n            return toPin(_first.value);\n          case 106:\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context.prev = 108;\n            _iterator2 = _asyncIterator(_iterator5);\n          case 110:\n            _context.next = 112;\n            return _awaitAsyncGenerator(_iterator2.next());\n          case 112:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n              _context.next = 119;\n              break;\n            }\n            _obj = _step2.value;\n            _context.next = 116;\n            return toPin(_obj);\n          case 116:\n            _iteratorAbruptCompletion2 = false;\n            _context.next = 110;\n            break;\n          case 119:\n            _context.next = 125;\n            break;\n          case 121:\n            _context.prev = 121;\n            _context.t3 = _context[\"catch\"](108);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t3;\n          case 125:\n            _context.prev = 125;\n            _context.prev = 126;\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context.next = 130;\n              break;\n            }\n            _context.next = 130;\n            return _awaitAsyncGenerator(_iterator2.return());\n          case 130:\n            _context.prev = 130;\n            if (!_didIteratorError2) {\n              _context.next = 133;\n              break;\n            }\n            throw _iteratorError2;\n          case 133:\n            return _context.finish(130);\n          case 134:\n            return _context.finish(125);\n          case 135:\n            return _context.abrupt(\"return\");\n          case 136:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n          case 137:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n          case 138:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[24, 34, 37, 40], [45, 55, 58, 61], [75, 88, 92, 102], [93,, 97, 101], [108, 121, 125, 135], [126,, 130, 134]]);\n  }));\n  return _normaliseInput.apply(this, arguments);\n}\nfunction toPin(input) {\n  var path = input.cid || \"\".concat(input.path);\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  /** @type {Pin} */\n  var pin = {\n    path: path,\n    recursive: input.recursive !== false\n  };\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n  return pin;\n}","map":{"version":3,"names":["errCode","CID","normaliseInput","input","undefined","Error","cid","asCID","toPin","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","pin","recursive","metadata"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"sourcesContent":["import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  const cid = CID.asCID(input)\n\n  if (cid) {\n    yield toPin({ cid })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-expect-error - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-expect-error\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input) {\n    // @ts-expect-error\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n    if (first.done) return iterator\n\n    // Iterable<CID|String>\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<{ cid: CID recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (Symbol.asyncIterator in input) {\n    // @ts-expect-error\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID|String>\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}