{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport var createPeers = configure(function (api) {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  function peers() {\n    return _peers.apply(this, arguments);\n  }\n  function _peers() {\n    _peers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        res,\n        _yield$res$json,\n        Peers,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('swarm/peers', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers\n              });\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n            case 6:\n              _yield$res$json = _context.sent;\n              Peers = _yield$res$json.Peers;\n              return _context.abrupt(\"return\", (Peers || []).map(function (peer) {\n                return {\n                  addr: multiaddr(peer.Addr),\n                  peer: peerIdFromString(peer.Peer),\n                  muxer: peer.Muxer,\n                  latency: peer.Latency,\n                  streams: peer.Streams,\n                  direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n                };\n              }));\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _peers.apply(this, arguments);\n  }\n  return peers;\n});","map":{"version":3,"names":["multiaddr","configure","toUrlSearchParams","peerIdFromString","createPeers","api","peers","options","post","signal","searchParams","headers","res","json","Peers","map","peer","addr","Addr","Peer","muxer","Muxer","latency","Latency","streams","Streams","direction","Direction","undefined"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/swarm/peers.js"],"sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const res = await api.post('swarm/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const { Peers } = await res.json()\n\n    return (Peers || []).map(peer => {\n      return {\n        addr: multiaddr(peer.Addr),\n        peer: peerIdFromString(peer.Peer),\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      }\n    })\n  }\n  return peers\n})\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,gBAAgB,QAAQ,iBAAiB;;AAElD;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,WAAW,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAC1C;AACF;AACA;EAFE,SAGeC,KAAK;IAAA;EAAA;EAAA;IAAA,oEAApB;MAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAsBC,OAAO,2DAAG,CAAC,CAAC;cAAA;cAAA,OACdF,GAAG,CAACG,IAAI,CAAC,aAAa,EAAE;gBACxCC,MAAM,EAAEF,OAAO,CAACE,MAAM;gBACtBC,YAAY,EAAER,iBAAiB,CAACK,OAAO,CAAC;gBACxCI,OAAO,EAAEJ,OAAO,CAACI;cACnB,CAAC,CAAC;YAAA;cAJIC,GAAG;cAAA;cAAA,OAOeA,GAAG,CAACC,IAAI,EAAE;YAAA;cAAA;cAA1BC,KAAK,mBAALA,KAAK;cAAA,iCAEN,CAACA,KAAK,IAAI,EAAE,EAAEC,GAAG,CAAC,UAAAC,IAAI,EAAI;gBAC/B,OAAO;kBACLC,IAAI,EAAEjB,SAAS,CAACgB,IAAI,CAACE,IAAI,CAAC;kBAC1BF,IAAI,EAAEb,gBAAgB,CAACa,IAAI,CAACG,IAAI,CAAC;kBACjCC,KAAK,EAAEJ,IAAI,CAACK,KAAK;kBACjBC,OAAO,EAAEN,IAAI,CAACO,OAAO;kBACrBC,OAAO,EAAER,IAAI,CAACS,OAAO;kBACrBC,SAAS,EAAEV,IAAI,CAACW,SAAS,IAAI,IAAI,GAAGC,SAAS,GAAGZ,IAAI,CAACW,SAAS,KAAK,CAAC,GAAG,SAAS,GAAG;gBACrF,CAAC;cACH,CAAC,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACH;IAAA;EAAA;EACD,OAAOrB,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"module"}