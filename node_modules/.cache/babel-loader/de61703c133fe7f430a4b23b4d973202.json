{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CID } from 'multiformats/cid';\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nexport var createLs = configure(function (api) {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n  function _ls() {\n    _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n      var options,\n        res,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        result,\n        _iterator2,\n        _step2,\n        entry,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              if (path) {\n                _context.next = 3;\n                break;\n              }\n              throw new Error('ipfs.files.ls requires a path');\n            case 3:\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('files/ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  arg: CID.asCID(path) ? \"/ipfs/\".concat(path) : path,\n                  // default long to true, diverges from go-ipfs where its false by default\n                  long: true\n                }, options), {}, {\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n            case 5:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 8;\n              _iterator = _asyncIterator(res.ndjson());\n            case 10:\n              _context.next = 12;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 12:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 39;\n                break;\n              }\n              result = _step.value;\n              if (!('Entries' in result)) {\n                _context.next = 34;\n                break;\n              }\n              _iterator2 = _createForOfIteratorHelper(result.Entries || []);\n              _context.prev = 16;\n              _iterator2.s();\n            case 18:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 24;\n                break;\n              }\n              entry = _step2.value;\n              _context.next = 22;\n              return toCoreInterface(objectToCamelWithMetadata(entry));\n            case 22:\n              _context.next = 18;\n              break;\n            case 24:\n              _context.next = 29;\n              break;\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](16);\n              _iterator2.e(_context.t0);\n            case 29:\n              _context.prev = 29;\n              _iterator2.f();\n              return _context.finish(29);\n            case 32:\n              _context.next = 36;\n              break;\n            case 34:\n              _context.next = 36;\n              return toCoreInterface(objectToCamelWithMetadata(result));\n            case 36:\n              _iteratorAbruptCompletion = false;\n              _context.next = 10;\n              break;\n            case 39:\n              _context.next = 45;\n              break;\n            case 41:\n              _context.prev = 41;\n              _context.t1 = _context[\"catch\"](8);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n            case 45:\n              _context.prev = 45;\n              _context.prev = 46;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 50;\n                break;\n              }\n              _context.next = 50;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 50:\n              _context.prev = 50;\n              if (!_didIteratorError) {\n                _context.next = 53;\n                break;\n              }\n              throw _iteratorError;\n            case 53:\n              return _context.finish(50);\n            case 54:\n              return _context.finish(45);\n            case 55:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 41, 45, 55], [16, 26, 29, 32], [46,, 50, 54]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n  return ls;\n});\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"names":["CID","objectToCamelWithMetadata","configure","toUrlSearchParams","createLs","api","ls","path","options","Error","post","signal","searchParams","arg","asCID","long","stream","headers","res","ndjson","result","Entries","entry","toCoreInterface","hash","cid","parse","type"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/files/ls.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nexport const createLs = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"],"mappings":";;;;;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,yBAAyB,QAAQ,yCAAyC;AACnF,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;AACA,OAAO,IAAMC,QAAQ,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;EACvC;AACF;AACA;EAFE,SAGiBC,EAAE;IAAA;EAAA;EAAA;IAAA,mEAAnB,iBAAqBC,IAAI;MAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cAAA,IAChCD,IAAI;gBAAA;gBAAA;cAAA;cAAA,MACD,IAAIE,KAAK,CAAC,+BAA+B,CAAC;YAAA;cAAA;cAAA,4BAGhCJ,GAAG,CAACK,IAAI,CAAC,UAAU,EAAE;gBACrCC,MAAM,EAAEH,OAAO,CAACG,MAAM;gBACtBC,YAAY,EAAET,iBAAiB;kBAC7BU,GAAG,EAAEb,GAAG,CAACc,KAAK,CAACP,IAAI,CAAC,mBAAYA,IAAI,IAAKA,IAAI;kBAC7C;kBACAQ,IAAI,EAAE;gBAAI,GACPP,OAAO;kBACVQ,MAAM,EAAE;gBAAI,GACZ;gBACFC,OAAO,EAAET,OAAO,CAACS;cACnB,CAAC,CAAC;YAAA;cAVIC,GAAG;cAAA;cAAA;cAAA;cAAA,2BAYkBA,GAAG,CAACC,MAAM,EAAE;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAtBC,MAAM;cAAA,MAEjB,SAAS,IAAIA,MAAM;gBAAA;gBAAA;cAAA;cAAA,wCACDA,MAAM,CAACC,OAAO,IAAI,EAAE;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAA7BC,KAAK;cAAA;cACd,OAAMC,eAAe,CAACtB,yBAAyB,CAACqB,KAAK,CAAC,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAGzD,OAAMC,eAAe,CAACtB,yBAAyB,CAACmB,MAAM,CAAC,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAG7D;IAAA;EAAA;EACD,OAAOd,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASiB,eAAe,CAAED,KAAK,EAAE;EAC/B,IAAIA,KAAK,CAACE,IAAI,EAAE;IACdF,KAAK,CAACG,GAAG,GAAGzB,GAAG,CAAC0B,KAAK,CAACJ,KAAK,CAACE,IAAI,CAAC;EACnC;EAEA,OAAOF,KAAK,CAACE,IAAI;EAEjBF,KAAK,CAACK,IAAI,GAAGL,KAAK,CAACK,IAAI,KAAK,CAAC,GAAG,WAAW,GAAG,MAAM;EAEpD,OAAOL,KAAK;AACd"},"metadata":{},"sourceType":"module"}