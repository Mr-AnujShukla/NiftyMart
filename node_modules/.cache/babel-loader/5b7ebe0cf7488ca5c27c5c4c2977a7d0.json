{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _excluded = [\"timeout\", \"signal\", \"headers\"];\nimport { encodeQuery } from './utils.js';\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRmAll(client) {\n  /**\n   * @type {RemotePiningAPI[\"rmAll\"]}\n   */\n  function rmAll(_x) {\n    return _rmAll.apply(this, arguments);\n  }\n  function _rmAll() {\n    _rmAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n      var timeout, signal, headers, query;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              timeout = _ref.timeout, signal = _ref.signal, headers = _ref.headers, query = _objectWithoutProperties(_ref, _excluded);\n              _context.next = 3;\n              return client.post('pin/remote/rm', {\n                timeout: timeout,\n                signal: signal,\n                headers: headers,\n                searchParams: encodeQuery(_objectSpread(_objectSpread({}, query), {}, {\n                  all: true\n                }))\n              });\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _rmAll.apply(this, arguments);\n  }\n  return rmAll;\n}","map":{"version":3,"names":["encodeQuery","createRmAll","client","rmAll","timeout","signal","headers","query","post","searchParams","all"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/pin/remote/rm-all.js"],"sourcesContent":["import { encodeQuery } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRmAll (client) {\n  /**\n   * @type {RemotePiningAPI[\"rmAll\"]}\n   */\n  async function rmAll ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: true\n      })\n    })\n  }\n\n  return rmAll\n}\n"],"mappings":";;;;;AAAA,SAASA,WAAW,QAAQ,YAAY;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,SAASC,WAAW,CAAEC,MAAM,EAAE;EACnC;AACF;AACA;EAFE,SAGeC,KAAK;IAAA;EAAA;EAAA;IAAA,oEAApB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAwBC,OAAO,QAAPA,OAAO,EAAEC,MAAM,QAANA,MAAM,EAAEC,OAAO,QAAPA,OAAO,EAAKC,KAAK;cAAA;cAAA,OAClDL,MAAM,CAACM,IAAI,CAAC,eAAe,EAAE;gBACjCJ,OAAO,EAAPA,OAAO;gBACPC,MAAM,EAANA,MAAM;gBACNC,OAAO,EAAPA,OAAO;gBACPG,YAAY,EAAET,WAAW,iCACpBO,KAAK;kBACRG,GAAG,EAAE;gBAAI;cAEb,CAAC,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACH;IAAA;EAAA;EAED,OAAOP,KAAK;AACd"},"metadata":{},"sourceType":"module"}