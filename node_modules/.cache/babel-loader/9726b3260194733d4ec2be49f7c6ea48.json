{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _wrapAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport var createGet = configure(function (api) {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n  function _get() {\n    _get = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n      var options,\n        opts,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              /** @type {Record<string, any>} */\n              opts = _objectSpread({\n                arg: \"\".concat(path instanceof Uint8Array ? CID.decode(path) : path)\n              }, options);\n              if (opts.compressionLevel) {\n                opts['compression-level'] = opts.compressionLevel;\n                delete opts.compressionLevel;\n              }\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('get', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(opts),\n                headers: options.headers\n              }));\n            case 5:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.iterator()), _awaitAsyncGenerator), \"t0\", 7);\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _get.apply(this, arguments);\n  }\n  return get;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createGet","api","get","path","options","opts","arg","Uint8Array","decode","compressionLevel","post","signal","searchParams","headers","res","iterator"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/get.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    }\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel\n      delete opts.compressionLevel\n    }\n\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return get\n})\n"],"mappings":";;;;;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,iBAAiB,QAAQ,+BAA+B;;AAEjE;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,SAAS,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;EACxC;AACF;AACA;EAFE,SAGiBC,GAAG;IAAA;EAAA;EAAA;IAAA,oEAApB,iBAAsBC,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAEC,OAAO,2DAAG,CAAC,CAAC;cACtC;cACMC,IAAI;gBACRC,GAAG,YAAKH,IAAI,YAAYI,UAAU,GAAGV,GAAG,CAACW,MAAM,CAACL,IAAI,CAAC,GAAGA,IAAI;cAAE,GAC3DC,OAAO;cAGZ,IAAIC,IAAI,CAACI,gBAAgB,EAAE;gBACzBJ,IAAI,CAAC,mBAAmB,CAAC,GAAGA,IAAI,CAACI,gBAAgB;gBACjD,OAAOJ,IAAI,CAACI,gBAAgB;cAC9B;cAAC;cAAA,4BAEiBR,GAAG,CAACS,IAAI,CAAC,KAAK,EAAE;gBAChCC,MAAM,EAAEP,OAAO,CAACO,MAAM;gBACtBC,YAAY,EAAEb,iBAAiB,CAACM,IAAI,CAAC;gBACrCQ,OAAO,EAAET,OAAO,CAACS;cACnB,CAAC,CAAC;YAAA;cAJIC,GAAG;cAMT,qEAAQA,GAAG,CAACC,QAAQ,EAAE;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACvB;IAAA;EAAA;EAED,OAAOb,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}