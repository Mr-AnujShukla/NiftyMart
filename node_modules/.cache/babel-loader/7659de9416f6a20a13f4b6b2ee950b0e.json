{"ast":null,"code":"import _defineProperty from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js';\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nvar Encoder = /*#__PURE__*/function () {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  function Encoder(name, prefix, baseEncode) {\n    _classCallCheck(this, Encoder);\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  _createClass(Encoder, [{\n    key: \"encode\",\n    value: function encode(bytes) {\n      if (bytes instanceof Uint8Array) {\n        return \"\".concat(this.prefix).concat(this.baseEncode(bytes));\n      } else {\n        throw Error('Unknown type, must be binary type');\n      }\n    }\n  }]);\n  return Encoder;\n}();\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nvar Decoder = /*#__PURE__*/function () {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  function Decoder(name, prefix, baseDecode) {\n    _classCallCheck(this, Decoder);\n    this.name = name;\n    this.prefix = prefix;\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n\n  /**\n   * @param {string} text\n   */\n  _createClass(Decoder, [{\n    key: \"decode\",\n    value: function decode(text) {\n      if (typeof text === 'string') {\n        if (text.codePointAt(0) !== this.prefixCodePoint) {\n          throw Error(\"Unable to decode multibase string \".concat(JSON.stringify(text), \", \").concat(this.name, \" decoder only supports inputs prefixed with \").concat(this.prefix));\n        }\n        return this.baseDecode(text.slice(this.prefix.length));\n      } else {\n        throw Error('Can only multibase decode strings');\n      }\n    }\n\n    /**\n     * @template {string} OtherPrefix\n     * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n     * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n     */\n  }, {\n    key: \"or\",\n    value: function or(decoder) {\n      return _or(this, decoder);\n    }\n  }]);\n  return Decoder;\n}();\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nvar ComposedDecoder = /*#__PURE__*/function () {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  function ComposedDecoder(decoders) {\n    _classCallCheck(this, ComposedDecoder);\n    this.decoders = decoders;\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  _createClass(ComposedDecoder, [{\n    key: \"or\",\n    value: function or(decoder) {\n      return _or(this, decoder);\n    }\n\n    /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */\n  }, {\n    key: \"decode\",\n    value: function decode(input) {\n      var prefix = /** @type {Prefix} */input[0];\n      var decoder = this.decoders[prefix];\n      if (decoder) {\n        return decoder.decode(input);\n      } else {\n        throw RangeError(\"Unable to decode multibase string \".concat(JSON.stringify(input), \", only inputs prefixed with \").concat(Object.keys(this.decoders), \" are supported\"));\n      }\n    }\n  }]);\n  return ComposedDecoder;\n}();\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nvar _or = function _or(left, right) {\n  return new ComposedDecoder( /** @type {Decoders<L|R>} */_objectSpread(_objectSpread({}, left.decoders || _defineProperty({}, /** @type API.UnibaseDecoder<L> */left.prefix, left)), right.decoders || _defineProperty({}, /** @type API.UnibaseDecoder<R> */right.prefix, right)));\n};\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport { _or as or };\nexport var Codec = /*#__PURE__*/function () {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  function Codec(name, prefix, baseEncode, baseDecode) {\n    _classCallCheck(this, Codec);\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  _createClass(Codec, [{\n    key: \"encode\",\n    value: function encode(input) {\n      return this.encoder.encode(input);\n    }\n\n    /**\n     * @param {string} input\n     */\n  }, {\n    key: \"decode\",\n    value: function decode(input) {\n      return this.decoder.decode(input);\n    }\n  }]);\n  return Codec;\n}();\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport var from = function from(_ref3) {\n  var name = _ref3.name,\n    prefix = _ref3.prefix,\n    encode = _ref3.encode,\n    decode = _ref3.decode;\n  return new Codec(name, prefix, encode, decode);\n};\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport var baseX = function baseX(_ref4) {\n  var prefix = _ref4.prefix,\n    name = _ref4.name,\n    alphabet = _ref4.alphabet;\n  var _basex = basex(alphabet, name),\n    encode = _basex.encode,\n    _decode = _basex.decode;\n  return from({\n    prefix: prefix,\n    name: name,\n    encode: encode,\n    /**\n     * @param {string} text\n     */\n    decode: function decode(text) {\n      return coerce(_decode(text));\n    }\n  });\n};\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nvar _decode2 = function decode(string, alphabet, bitsPerChar, name) {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  var codes = {};\n  for (var i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n\n  // Count the padding bytes:\n  var end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n\n  // Allocate the output:\n  var out = new Uint8Array(end * bitsPerChar / 8 | 0);\n\n  // Parse the data:\n  var bits = 0; // Number of bits currently in the buffer\n  var buffer = 0; // Bits waiting to be written out, MSB first\n  var written = 0; // Next byte to write\n  for (var _i = 0; _i < end; ++_i) {\n    // Read one character from the string:\n    var value = codes[string[_i]];\n    if (value === undefined) {\n      throw new SyntaxError(\"Non-\".concat(name, \" character\"));\n    }\n\n    // Append the bits to the buffer:\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nvar _encode = function encode(data, alphabet, bitsPerChar) {\n  var pad = alphabet[alphabet.length - 1] === '=';\n  var mask = (1 << bitsPerChar) - 1;\n  var out = '';\n  var bits = 0; // Number of bits currently in the buffer\n  var buffer = 0; // Bits waiting to be written out, MSB first\n  for (var i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport var rfc4648 = function rfc4648(_ref5) {\n  var name = _ref5.name,\n    prefix = _ref5.prefix,\n    bitsPerChar = _ref5.bitsPerChar,\n    alphabet = _ref5.alphabet;\n  return from({\n    prefix: prefix,\n    name: name,\n    encode: function encode(input) {\n      return _encode(input, alphabet, bitsPerChar);\n    },\n    decode: function decode(input) {\n      return _decode2(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","map":{"version":3,"names":["basex","coerce","API","Encoder","name","prefix","baseEncode","bytes","Uint8Array","Error","Decoder","baseDecode","codePointAt","undefined","prefixCodePoint","text","JSON","stringify","slice","length","decoder","or","ComposedDecoder","decoders","input","decode","RangeError","Object","keys","left","right","Codec","encoder","encode","from","baseX","alphabet","string","bitsPerChar","codes","i","end","out","bits","buffer","written","value","SyntaxError","data","pad","mask","rfc4648"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/multiformats/src/bases/base.js"],"sourcesContent":["import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}