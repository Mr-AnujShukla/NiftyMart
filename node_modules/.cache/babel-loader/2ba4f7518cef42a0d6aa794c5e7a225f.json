{"ast":null,"code":"import _createClass from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _slicedToArray from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport var create = function create(code, digest) {\n  var size = digest.byteLength;\n  var sizeOffset = varint.encodingLength(code);\n  var digestOffset = sizeOffset + varint.encodingLength(size);\n  var bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport var decode = function decode(multihash) {\n  var bytes = coerce(multihash);\n  var _varint$decode = varint.decode(bytes),\n    _varint$decode2 = _slicedToArray(_varint$decode, 2),\n    code = _varint$decode2[0],\n    sizeOffset = _varint$decode2[1];\n  var _varint$decode3 = varint.decode(bytes.subarray(sizeOffset)),\n    _varint$decode4 = _slicedToArray(_varint$decode3, 2),\n    size = _varint$decode4[0],\n    digestOffset = _varint$decode4[1];\n  var digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport var equals = function equals(a, b) {\n  if (a === b) {\n    return true;\n  } else {\n    var data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */b;\n    return a.code === data.code && a.size === data.size && data.bytes instanceof Uint8Array && equalBytes(a.bytes, data.bytes);\n  }\n};\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing alogrithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport var Digest = /*#__PURE__*/_createClass(\n/**\n * Creates a multihash digest.\n *\n * @param {Code} code\n * @param {Size} size\n * @param {Uint8Array} digest\n * @param {Uint8Array} bytes\n */\nfunction Digest(code, size, digest, bytes) {\n  _classCallCheck(this, Digest);\n  this.code = code;\n  this.size = size;\n  this.digest = digest;\n  this.bytes = bytes;\n});","map":{"version":3,"names":["coerce","equals","equalBytes","varint","create","code","digest","size","byteLength","sizeOffset","encodingLength","digestOffset","bytes","Uint8Array","encodeTo","set","Digest","decode","multihash","subarray","Error","a","b","data"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/multiformats/src/hashes/digest.js"],"sourcesContent":["import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing alogrithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n"],"mappings":";;;AAAA,SAASA,MAAM,EAAEC,MAAM,IAAIC,UAAU,QAAQ,aAAa;AAC1D,OAAO,KAAKC,MAAM,MAAM,cAAc;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAIC,IAAI,EAAEC,MAAM,EAAK;EACtC,IAAMC,IAAI,GAAGD,MAAM,CAACE,UAAU;EAC9B,IAAMC,UAAU,GAAGN,MAAM,CAACO,cAAc,CAACL,IAAI,CAAC;EAC9C,IAAMM,YAAY,GAAGF,UAAU,GAAGN,MAAM,CAACO,cAAc,CAACH,IAAI,CAAC;EAE7D,IAAMK,KAAK,GAAG,IAAIC,UAAU,CAACF,YAAY,GAAGJ,IAAI,CAAC;EACjDJ,MAAM,CAACW,QAAQ,CAACT,IAAI,EAAEO,KAAK,EAAE,CAAC,CAAC;EAC/BT,MAAM,CAACW,QAAQ,CAACP,IAAI,EAAEK,KAAK,EAAEH,UAAU,CAAC;EACxCG,KAAK,CAACG,GAAG,CAACT,MAAM,EAAEK,YAAY,CAAC;EAE/B,OAAO,IAAIK,MAAM,CAACX,IAAI,EAAEE,IAAI,EAAED,MAAM,EAAEM,KAAK,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMK,MAAM,GAAG,SAATA,MAAM,CAAIC,SAAS,EAAK;EACnC,IAAMN,KAAK,GAAGZ,MAAM,CAACkB,SAAS,CAAC;EAC/B,qBAA2Bf,MAAM,CAACc,MAAM,CAACL,KAAK,CAAC;IAAA;IAAxCP,IAAI;IAAEI,UAAU;EACvB,sBAA6BN,MAAM,CAACc,MAAM,CAACL,KAAK,CAACO,QAAQ,CAACV,UAAU,CAAC,CAAC;IAAA;IAA/DF,IAAI;IAAEI,YAAY;EACzB,IAAML,MAAM,GAAGM,KAAK,CAACO,QAAQ,CAACV,UAAU,GAAGE,YAAY,CAAC;EAExD,IAAIL,MAAM,CAACE,UAAU,KAAKD,IAAI,EAAE;IAC9B,MAAM,IAAIa,KAAK,CAAC,kBAAkB,CAAC;EACrC;EAEA,OAAO,IAAIJ,MAAM,CAACX,IAAI,EAAEE,IAAI,EAAED,MAAM,EAAEM,KAAK,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMX,MAAM,GAAG,SAATA,MAAM,CAAIoB,CAAC,EAAEC,CAAC,EAAK;EAC9B,IAAID,CAAC,KAAKC,CAAC,EAAE;IACX,OAAO,IAAI;EACb,CAAC,MAAM;IACL,IAAMC,IAAI,GAAG,6DAA8DD,CAAE;IAE7E,OACED,CAAC,CAAChB,IAAI,KAAKkB,IAAI,CAAClB,IAAI,IACpBgB,CAAC,CAACd,IAAI,KAAKgB,IAAI,CAAChB,IAAI,IACpBgB,IAAI,CAACX,KAAK,YAAYC,UAAU,IAChCX,UAAU,CAACmB,CAAC,CAACT,KAAK,EAAEW,IAAI,CAACX,KAAK,CAAC;EAEnC;AACF,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaI,MAAM;AACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,gBAAaX,IAAI,EAAEE,IAAI,EAAED,MAAM,EAAEM,KAAK,EAAE;EAAA;EACtC,IAAI,CAACP,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACE,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACD,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACM,KAAK,GAAGA,KAAK;AACpB,CAAC"},"metadata":{},"sourceType":"module"}