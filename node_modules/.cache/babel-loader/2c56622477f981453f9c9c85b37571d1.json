{"ast":null,"code":"import { multiaddr } from '@multiformats/multiaddr';\nvar reduceValue = function reduceValue(_, v) {\n  return v;\n};\nvar tcpUri = function tcpUri(str, port, parts, opts) {\n  // return tcp when explicitly requested\n  if (opts != null && opts.assumeHttp === false) return \"tcp://\".concat(str, \":\").concat(port);\n  // check if tcp is the last protocol in multiaddr\n  var protocol = 'tcp';\n  var explicitPort = \":\".concat(port);\n  var last = parts[parts.length - 1];\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http';\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort;\n  }\n  return \"\".concat(protocol, \"://\").concat(str).concat(explicitPort);\n};\nvar Reducers = {\n  ip4: reduceValue,\n  ip6: function ip6(str, content, i, parts) {\n    return parts.length === 1 && parts[0].protocol === 'ip6' ? content : \"[\".concat(content, \"]\");\n  },\n  tcp: function tcp(str, content, i, parts, opts) {\n    return parts.some(function (p) {\n      return ['http', 'https', 'ws', 'wss'].includes(p.protocol);\n    }) ? \"\".concat(str, \":\").concat(content) : tcpUri(str, content, parts, opts);\n  },\n  udp: function udp(str, content) {\n    return \"udp://\".concat(str, \":\").concat(content);\n  },\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: function ipfs(str, content) {\n    return \"\".concat(str, \"/ipfs/\").concat(content);\n  },\n  p2p: function p2p(str, content) {\n    return \"\".concat(str, \"/p2p/\").concat(content);\n  },\n  http: function http(str) {\n    return \"http://\".concat(str);\n  },\n  https: function https(str) {\n    return \"https://\".concat(str);\n  },\n  ws: function ws(str) {\n    return \"ws://\".concat(str);\n  },\n  wss: function wss(str) {\n    return \"wss://\".concat(str);\n  },\n  'p2p-websocket-star': function p2pWebsocketStar(str) {\n    return \"\".concat(str, \"/p2p-websocket-star\");\n  },\n  'p2p-webrtc-star': function p2pWebrtcStar(str) {\n    return \"\".concat(str, \"/p2p-webrtc-star\");\n  },\n  'p2p-webrtc-direct': function p2pWebrtcDirect(str) {\n    return \"\".concat(str, \"/p2p-webrtc-direct\");\n  }\n};\nexport function multiaddrToUri(input, opts) {\n  var ma = multiaddr(input);\n  var parts = ma.toString().split('/').slice(1);\n  return ma.tuples().map(function (tuple) {\n    var _parts$shift, _parts$shift2;\n    return {\n      protocol: (_parts$shift = parts.shift()) !== null && _parts$shift !== void 0 ? _parts$shift : '',\n      content: tuple[1] != null ? (_parts$shift2 = parts.shift()) !== null && _parts$shift2 !== void 0 ? _parts$shift2 : '' : ''\n    };\n  }).reduce(function (str, part, i, parts) {\n    var reduce = Reducers[part.protocol];\n    if (reduce == null) {\n      throw new Error(\"Unsupported protocol \".concat(part.protocol));\n    }\n    return reduce(str, part.content, i, parts, opts);\n  }, '');\n}","map":{"version":3,"mappings":"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","names":["multiaddr","reduceValue","_","v","tcpUri","str","port","parts","opts","assumeHttp","protocol","explicitPort","last","length","Reducers","ip4","ip6","content","i","tcp","some","includes","p","udp","dnsaddr","dns4","dns6","ipfs","p2p","http","https","ws","wss","multiaddrToUri","input","ma","toString","split","slice","tuples","map","shift","tuple","reduce","part","Error"],"sources":["C:\\Users\\HP\\Desktop\\my_workspace\\hackathon\\NFT\\Pixelate\\node_modules\\@multiformats\\multiaddr-to-uri\\src\\index.ts"],"sourcesContent":["import type { Multiaddr } from '@multiformats/multiaddr'\nimport { multiaddr } from '@multiformats/multiaddr'\n\nexport interface MultiaddrToUriOpts {\n  assumeHttp?: boolean\n}\n\ninterface Reducer { (str: string, content: string, i: number, parts: Part[], opts?: MultiaddrToUriOpts): string }\n\nconst reduceValue: Reducer = (_, v) => v\nconst tcpUri = (str: string, port: string, parts: Part[], opts?: MultiaddrToUriOpts) => {\n  // return tcp when explicitly requested\n  if ((opts != null) && opts.assumeHttp === false) return `tcp://${str}:${port}`\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp'\n  let explicitPort = `:${port}`\n  const last = parts[parts.length - 1]\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http'\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort\n  }\n  return `${protocol}://${str}${explicitPort}`\n}\n\nconst Reducers: Record<string, Reducer> = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts, opts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : tcpUri(str, content, parts, opts)\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\ninterface Part {\n  protocol: string\n  content: string\n}\n\nexport function multiaddrToUri (input: Multiaddr | string | Uint8Array, opts?: MultiaddrToUriOpts) {\n  const ma = multiaddr(input)\n  const parts = ma.toString().split('/').slice(1)\n  return ma\n    .tuples()\n    .map(tuple => ({\n      protocol: parts.shift() ?? '',\n      content: (tuple[1] != null) ? parts.shift() ?? '' : ''\n    }))\n    .reduce((str: string, part: Part, i: number, parts: Part[]) => {\n      const reduce = Reducers[part.protocol]\n      if (reduce == null) {\n        throw new Error(`Unsupported protocol ${part.protocol}`)\n      }\n      return reduce(str, part.content, i, parts, opts)\n    }, '')\n}\n"]},"metadata":{},"sourceType":"module"}