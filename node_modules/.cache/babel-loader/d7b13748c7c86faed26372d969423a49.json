{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createId } from './id.js';\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport var createIsOnline = function createIsOnline(options) {\n  var id = createId(options);\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  function isOnline() {\n    return _isOnline.apply(this, arguments);\n  }\n  function _isOnline() {\n    _isOnline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n        res,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return id(options);\n            case 3:\n              res = _context.sent;\n              return _context.abrupt(\"return\", Boolean(res && res.addresses && res.addresses.length));\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _isOnline.apply(this, arguments);\n  }\n  return isOnline;\n};","map":{"version":3,"names":["createId","createIsOnline","options","id","isOnline","res","Boolean","addresses","length"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/is-online.js"],"sourcesContent":["import { createId } from './id.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport const createIsOnline = options => {\n  const id = createId(options)\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,SAAS;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAGC,OAAO,EAAI;EACvC,IAAMC,EAAE,GAAGH,QAAQ,CAACE,OAAO,CAAC;;EAE5B;AACF;AACA;EAFE,SAGeE,QAAQ;IAAA;EAAA;EAAA;IAAA,uEAAvB;MAAA;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;cAAyBF,OAAO,2DAAG,CAAC,CAAC;cAAA;cAAA,OACjBC,EAAE,CAACD,OAAO,CAAC;YAAA;cAAvBG,GAAG;cAAA,iCAEFC,OAAO,CAACD,GAAG,IAAIA,GAAG,CAACE,SAAS,IAAIF,GAAG,CAACE,SAAS,CAACC,MAAM,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAC7D;IAAA;EAAA;EACD,OAAOJ,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module"}