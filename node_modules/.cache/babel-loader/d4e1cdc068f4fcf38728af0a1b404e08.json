{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createAddAll } from './add-all.js';\nimport last from 'it-last';\nimport { configure } from './lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single';\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport function createAdd(options) {\n  var all = createAddAll(options);\n  return configure(function () {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    function add(_x) {\n      return _add.apply(this, arguments);\n    }\n    function _add() {\n      _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n        var options,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                _context.next = 3;\n                return last(all(normaliseInput(input), options));\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _add.apply(this, arguments);\n    }\n    return add;\n  })(options);\n}","map":{"version":3,"names":["createAddAll","last","configure","normaliseInput","createAdd","options","all","add","input"],"sources":["C:/Users/HP/Desktop/my_workspace/hackathon/NFT/Pixelate/node_modules/ipfs-http-client/src/add.js"],"sourcesContent":["import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from './lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport function createAdd (options) {\n  const all = createAddAll(options)\n  return configure(() => {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    async function add (input, options = {}) {\n      // @ts-expect-error - last may return undefined if source is empty\n      return await last(all(normaliseInput(input), options))\n    }\n    return add\n  })(options)\n}\n"],"mappings":";;AAAA,SAASA,YAAY,QAAQ,cAAc;AAC3C,OAAOC,IAAI,MAAM,SAAS;AAC1B,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,cAAc,QAAQ,8CAA8C;;AAE7E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,SAASC,SAAS,CAAEC,OAAO,EAAE;EAClC,IAAMC,GAAG,GAAGN,YAAY,CAACK,OAAO,CAAC;EACjC,OAAOH,SAAS,CAAC,YAAM;IACrB;AACJ;AACA;IAFI,SAGeK,GAAG;MAAA;IAAA;IAAA;MAAA,kEAAlB,iBAAoBC,KAAK;QAAA;UAAA;QAAA;UAAA;YAAA;cAAA;gBAAEH,OAAO,2DAAG,CAAC,CAAC;gBAAA;gBAAA,OAExBJ,IAAI,CAACK,GAAG,CAACH,cAAc,CAACK,KAAK,CAAC,EAAEH,OAAO,CAAC,CAAC;cAAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACvD;MAAA;IAAA;IACD,OAAOE,GAAG;EACZ,CAAC,CAAC,CAACF,OAAO,CAAC;AACb"},"metadata":{},"sourceType":"module"}